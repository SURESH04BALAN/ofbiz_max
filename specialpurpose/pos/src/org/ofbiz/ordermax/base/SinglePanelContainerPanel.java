/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.base;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author BBS Auctions
 */
public class SinglePanelContainerPanel extends javax.swing.JPanel implements ContainerPanelInterface {

    /**
     * Creates new form TwoPanelContainerPanel
     */
    public SinglePanelContainerPanel() {
        initComponents();
    }

    private List<ActionListener> listeners = new ArrayList<ActionListener>();

    public void addActionListener(ActionListener listener) {
        listeners.add(listener);
    }

    public void removeActionListener(ActionListener listener) {
        listeners.remove(listener);
    }

    public JPanel getPanelDetail() {
        return panelDetail;
    }

    public JPanel getjPanel1() {
        return panelDetail;
    }

    public JPanel getPanelParent() {
        return this;
    }

    public JTextField textField = null;

    @Override
    public void setVisible(boolean value) {
        super.setVisible(value);
        if (textField != null) {
            textField.requestFocusInWindow();
        }
    }

    @Override
    public JPanel getPanelButton() {
        return null;
    }
    private ContainerPanelInterface.ReturnStausType returnStatus = ContainerPanelInterface.ReturnStausType.RET_CANCEL;

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public ContainerPanelInterface.ReturnStausType getReturnStatus() {
        return returnStatus;
    }

    private void doClose(ContainerPanelInterface.ReturnStausType retStatus) {
        returnStatus = retStatus;
        //notify 
        ActionEvent event = new ActionEvent(this, 1, "partyId", new Date().getTime(), 2);
        for (ActionListener listener : listeners) {
            listener.actionPerformed(event); // broadcast to all
        }
//        setVisible(false);
//        dispose();
    }

    public void okButtonPressed() {
        doClose(ContainerPanelInterface.ReturnStausType.RET_OK);
    }

    public void cancelButtonPressed() {
        doClose(ContainerPanelInterface.ReturnStausType.RET_CANCEL);
    }
    /*
     @Override
     public void setVisible(final boolean visible) {
     // make sure that frame is marked as not disposed if it is asked to be visible
     //        if (visible) {
     //            setDisposed(false);
     //        }
     // let's handle visibility...
     if (!visible || !isVisible()) { // have to check this condition simply because super.setVisible(true) invokes toFront if frame was already visible
     super.setVisible(visible);
     }
     // ...and bring frame to the front.. in a strange and weird way
     if (visible) {
     int state = super.getExtendedState();
     state &= ~JFrame.ICONIFIED;
     super.setExtendedState(state);
     super.setAlwaysOnTop(true);
     super.toFront();
     super.requestFocus();
     super.setAlwaysOnTop(false);
     }
     if (textField != null) {
     textField.requestFocusInWindow();
     }
     }

     @Override
     public void toFront() {
     super.setVisible(true);
     int state = super.getExtendedState();
     state &= ~JFrame.ICONIFIED;
     super.setExtendedState(state);
     super.setAlwaysOnTop(true);
     super.toFront();
     super.requestFocus();
     super.setAlwaysOnTop(false);
     }
     */
    protected String ownerName = null;

    public String getOwnerName() {
        return ownerName;
    }

    public void setDividerLocation(int value) {

    }

    public void setCaption(String title) {

    }

    @Override
    public ContainerType getContainerType() {
        return ContainerType.TwoPanelContainer;
    }

    // End of variables declaration                   
    @Override
    public JPanel getPanelSelecton() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDetail = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        panelDetail.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panelDetailLayout = new javax.swing.GroupLayout(panelDetail);
        panelDetail.setLayout(panelDetailLayout);
        panelDetailLayout.setHorizontalGroup(
            panelDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 396, Short.MAX_VALUE)
        );
        panelDetailLayout.setVerticalGroup(
            panelDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        add(panelDetail, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelDetail;
    // End of variables declaration//GEN-END:variables
}
