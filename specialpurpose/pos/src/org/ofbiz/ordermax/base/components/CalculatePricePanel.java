/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.base.components;

import java.math.BigDecimal;
import java.math.RoundingMode;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import mvc.model.list.JGenericComboBoxSelectionModel;
import mvc.model.list.StringListCellRenderer;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.ordermax.orderbase.PercentageSelectSingleton;
import org.ofbiz.ordermax.product.ProductPanel;

/**
 *
 * @author BBS Auctions
 */
public class CalculatePricePanel extends javax.swing.JPanel {

    // private JGenericComboBoxSelectionModel<String> percentageCombo = null;
    JTextField txtPruchasePrice = null;

    /**
     * Creates new form CalculatePricePanel
     */
    public CalculatePricePanel(JTextField field) {
        initComponents();
        txtPruchasePrice = field;
        spinnerGrossMargin.setValue(new Double("30"));
        txtMarginDollar.getDocument().addDocumentListener(new TextChangeListner());
        txtPruchasePrice.getDocument().addDocumentListener(new PurchasePriceChangeListner());        

        spinnerGrossMargin.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
//                calculateSalePrice();
            }
        });
        // percentageCombo = new JGenericComboBoxSelectionModel<String>(panelPercentage, PercentageSelectSingleton.getValueList(), new StringListCellRenderer(false));        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtMarginDollar = new javax.swing.JTextField();
        panelPercentage = new javax.swing.JPanel();
        spinnerGrossMargin = new javax.swing.JSpinner();
        txtPrice = new javax.swing.JTextField();
        txtMarkupPcnt = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(0, 4));

        jLabel1.setText("Price:");
        jPanel2.add(jLabel1);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Gross Margin %");
        jPanel2.add(jLabel2);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Gross Profit($):");
        jPanel2.add(jLabel3);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Mark up %");
        jPanel2.add(jLabel4);

        txtMarginDollar.setMargin(new java.awt.Insets(2, 5, 2, 5));
        jPanel2.add(txtMarginDollar);

        panelPercentage.setLayout(new java.awt.BorderLayout());

        spinnerGrossMargin.setModel(new javax.swing.SpinnerNumberModel(30.0d, 0.0d, 100.0d, 0.5d));
        panelPercentage.add(spinnerGrossMargin, java.awt.BorderLayout.CENTER);

        jPanel2.add(panelPercentage);

        txtPrice.setEditable(false);
        jPanel2.add(txtPrice);

        txtMarkupPcnt.setEditable(false);
        jPanel2.add(txtMarkupPcnt);

        add(jPanel2, java.awt.BorderLayout.CENTER);

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 29, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        add(jPanel3, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents
    boolean isCalculating = false;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        calculateSalePrice();
        // TODO add your handling code here:
       /* BigDecimal getVal = new BigDecimal("1.1");
         String str = taxable.getSelectedItem();

         if (txtGstPrice.getText() != null && txtGstPrice.getText().isEmpty() == false) {
         if (str != null && "Y".equals(str)) {
         BigDecimal val = new BigDecimal(txtGstPrice.getText());
         // divide bg1 with bg2 with 3 scale

         val = val.divide(getVal, 5, RoundingMode.CEILING);
         editBasePrice.setText(val.toString());
         editListPrice.setText(val.toString());
         } else {
         BigDecimal val = new BigDecimal(txtGstPrice.getText());
         // divide bg1 with bg2 with 3 scale
         editBasePrice.setText(val.toString());
         editListPrice.setText(val.toString());
         }
         }*/
    }//GEN-LAST:event_jButton1ActionPerformed

    void calculateSalePrice() {
        if (txtPruchasePrice != null) {
            if (UtilValidate.isNotEmpty(txtPruchasePrice.getText()) && UtilValidate.isNotEmpty(spinnerGrossMargin.getValue())) {
                isCalculating = true;
                try {
                    BigDecimal costPrice = new BigDecimal(txtPruchasePrice.getText());
                    Double value = (Double) spinnerGrossMargin.getValue();
                    BigDecimal grossMargin = BigDecimal.valueOf(value).divide(BigDecimal.valueOf(100), 2, RoundingMode.HALF_UP);
                    BigDecimal sellingPrice = getSellingPrice(grossMargin, costPrice);
                    txtMarginDollar.setText(sellingPrice.toString());
                    txtPrice.setText(sellingPrice.subtract(costPrice).toString());
                    txtMarkupPcnt.setText(markupPercentage(sellingPrice, costPrice).multiply(BigDecimal.valueOf(100)).toString() + "%");

                } finally {
                    isCalculating = false;
                }
            }
        }
    }

    public void setText(String value) {
        txtPrice.setText("");
        txtMarkupPcnt.setText("");
        //spinnerGrossMargin.setValue(new Double("30"));
        txtMarginDollar.setText(value);
    }

    public String getText() {
        return txtMarginDollar.getText();
    }

    static public BigDecimal getProfit(BigDecimal sellingPrice, BigDecimal costPrice) {
        return sellingPrice.subtract(costPrice);
    }

    static public BigDecimal markupPercentage(BigDecimal sellingPrice, BigDecimal costPrice) {
        return costPrice.compareTo(BigDecimal.ZERO) == 0? BigDecimal.ZERO : getProfit(sellingPrice, costPrice).divide(costPrice, 2, RoundingMode.HALF_UP);
    }

    static public BigDecimal grossMarginPercentage(BigDecimal sellingPrice, BigDecimal costPrice) {

        return sellingPrice.compareTo(BigDecimal.ZERO) == 0 ? BigDecimal.ZERO : getProfit(sellingPrice, costPrice).divide(sellingPrice, 2, RoundingMode.HALF_UP);
    }

    static public BigDecimal getSellingPrice(BigDecimal grossMarginPercent, BigDecimal costPrice) {
        BigDecimal grossMarginVal = BigDecimal.valueOf(1).subtract(grossMarginPercent);
        return grossMarginVal.compareTo(BigDecimal.ZERO) == 0 ? BigDecimal.ZERO : costPrice.divide(grossMarginVal, 2, RoundingMode.HALF_UP);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel panelPercentage;
    private javax.swing.JSpinner spinnerGrossMargin;
    private javax.swing.JTextField txtMarginDollar;
    private javax.swing.JTextField txtMarkupPcnt;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

    protected class TextChangeListner implements DocumentListener {

        public void actionPerformed(java.awt.event.ActionEvent e) {
        }

        public void changedUpdate(DocumentEvent e) {

            warn(e);

        }

        public void removeUpdate(DocumentEvent e) {

            warn(e);

        }

        public void insertUpdate(DocumentEvent e) {

            warn(e);

        }

        void warn(DocumentEvent e) {

            if (txtPruchasePrice != null && !isCalculating) {
                if (UtilValidate.isNotEmpty(txtPruchasePrice.getText()) && UtilValidate.isNotEmpty(txtMarginDollar.getText())) {
                    BigDecimal costPrice = new BigDecimal(txtPruchasePrice.getText());
                    BigDecimal sellingPrice = new BigDecimal(txtMarginDollar.getText());
                    //Double value = (Double) spinnerGrossMargin.getValue();
                    // BigDecimal grossMargin = BigDecimal.valueOf(value).divide(BigDecimal.valueOf(100),2, RoundingMode.HALF_UP);

                    BigDecimal grossMargin = grossMarginPercentage(sellingPrice, costPrice);
                    //spinnerGrossMargin.setValue(grossMargin.multiply(BigDecimal.valueOf(100)).doubleValue());
                    //txtMarginDollar.setText(sellingPrice.toString());
                    txtPrice.setText(sellingPrice.subtract(costPrice).toString());
                    txtMarkupPcnt.setText(markupPercentage(sellingPrice, costPrice).multiply(BigDecimal.valueOf(100)).toString() + "%");
                }
            }
        }
    }
    
     protected class PurchasePriceChangeListner implements DocumentListener {

        public void actionPerformed(java.awt.event.ActionEvent e) {
        }

        public void changedUpdate(DocumentEvent e) {

            warn(e);

        }

        public void removeUpdate(DocumentEvent e) {

            warn(e);

        }

        public void insertUpdate(DocumentEvent e) {

            warn(e);

        }

        void warn(DocumentEvent e) {

          // calculateSalePrice();
            
        }
    }
}
