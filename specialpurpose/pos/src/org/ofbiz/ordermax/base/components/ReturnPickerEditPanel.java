/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.base.components;

import java.util.Map;
import org.ofbiz.base.util.Debug;
import org.ofbiz.entity.condition.EntityCondition;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.guiapp.xui.XuiSession;
import org.ofbiz.ordermax.base.ControllerOptions;
import org.ofbiz.ordermax.base.ObservingTextField;
import org.ofbiz.ordermax.report.ReportParameterSelectionInterface;
import org.ofbiz.ordermax.utility.LookupActionListner;

/**
 *
 * @author siranjeev
 */
public class ReturnPickerEditPanel extends javax.swing.JPanel implements ReportParameterSelectionInterface {

    static public String module = ReturnPickerEditPanel.class.getName();
    public final static String ReturnEditorId = "ReturnIdTextField";
    public static String keyId = "returnId";

    /**
     * Creates new form DatePickerEditPanel
     */
    public ReturnPickerEditPanel(ControllerOptions controllerOptions) {
        initComponents();
        controllerOptions.put(ReturnEditorId, textIdField);
        controllerOptions.setDoubleClickCloseDialog();
        btnHeaderPatryId.addActionListener(new LookupActionListner(LookupActionListnerInterface.LookupType.ReturnId, controllerOptions));

    }
    protected XuiSession session = null;

    public XuiSession getSession() {
        return session;
    }
    public void setEnable(boolean enable) {
        btnHeaderPatryId.setEnabled(enable);
        textIdField.setEnabled(enable);
    }

    public void setSession(XuiSession session) {
        this.session = session;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnHeaderPatryId = new javax.swing.JButton();
        textIdField = new ObservingTextField();

        btnHeaderPatryId.setIcon(new javax.swing.ImageIcon("C:\\backup\\ofbiz-12.04.02\\folder_open.jpg")); // NOI18N
        btnHeaderPatryId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHeaderPatryIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(textIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHeaderPatryId, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(textIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnHeaderPatryId))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnHeaderPatryIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHeaderPatryIdActionPerformed

    }//GEN-LAST:event_btnHeaderPatryIdActionPerformed

    private ClassLoader getClassLoader() {

        ClassLoader cl = null;
        try {
            cl = session.getClassLoader();

            if (cl == null) {
                try {

                    cl = Thread.currentThread().getContextClassLoader();

                } catch (Throwable t) {

                }
                if (cl == null) {
                    try {
                        cl = this.getClass().getClassLoader();
                    } catch (Throwable t) {
                        Debug.logError(t, module);
                    }
                }
            }
        } catch (Exception e) {
            Debug.logError(e, module);
        }
        return cl;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHeaderPatryId;
    public javax.swing.JTextField textIdField;
    // End of variables declaration//GEN-END:variables

    @Override
    public EntityCondition getEntityCondition() {
        if (textIdField.getText().isEmpty() == false) {
            return EntityCondition.makeCondition(keyId, EntityOperator.EQUALS, textIdField.getText());
        } else {
            return null;
        }
    }

    @Override
    public String getEntityId() {
        return keyId;
    }

    @Override
    public Object getEntityValue() {
        if (textIdField.getText().isEmpty() == false) {
            return textIdField.getText();
        } else {
            return null;
        }
    }

    @Override
    public void getValueMap(Map<String, Object> valueMap) {
        String val = (String) getEntityValue();
        if (val != null) {
            valueMap.put(getEntityId(), val);
        }
    }

}
