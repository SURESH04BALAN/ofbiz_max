/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.base;

import java.awt.BorderLayout;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author siranjeev
 */
public class TwoPanelContainerInternalFrame extends javax.swing.JInternalFrame implements ContainerPanelInterface {

    /**
     * Creates new form ThreePanelContainerInternalFrame
     *
     * @param ownerName
     */
    public TwoPanelContainerInternalFrame(final String ownerName) {
        initComponents();
        this.ownerName = ownerName;

        setMaximizable(true);
        setIconifiable(true);
        setClosable(true);
        setResizable(true);
    }

    public void setOrientation(boolean vertical) {
        if (vertical) {
            this.setLayout(null);
            this.setLayout(new BorderLayout());
            this.add(panelButton, BorderLayout.WEST);
            this.add(panelDetail, BorderLayout.CENTER);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelButton = new javax.swing.JPanel();
        panelDetail = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setNormalBounds(new java.awt.Rectangle(0, 0, 0, 0));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        javax.swing.GroupLayout panelButtonLayout = new javax.swing.GroupLayout(panelButton);
        panelButton.setLayout(panelButtonLayout);
        panelButtonLayout.setHorizontalGroup(
            panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        panelButtonLayout.setVerticalGroup(
            panelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        getContentPane().add(panelButton, java.awt.BorderLayout.PAGE_END);

        panelDetail.setPreferredSize(new java.awt.Dimension(700, 200));
        panelDetail.setLayout(new java.awt.GridLayout(1, 0));
        getContentPane().add(panelDetail, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
//        this.dispose();
    }//GEN-LAST:event_formInternalFrameClosed
    public JPanel getPanelDetail() {
        return panelDetail;
    }

    public JPanel getjPanel1() {
        return panelDetail;
    }
    public JTextField textField = null;

    @Override
    public void setVisible(boolean value) {
        super.setVisible(value);
        if (textField != null) {
            textField.requestFocusInWindow();
        }
    }

    public JPanel getPanelButton() {
        return panelButton;
    }
    private ReturnStausType returnStatus = ReturnStausType.RET_CANCEL;

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public ReturnStausType getReturnStatus() {
        return returnStatus;
    }

    private void doClose(ReturnStausType retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    public void okButtonPressed() {
        doClose(ReturnStausType.RET_OK);
    }

    public void cancelButtonPressed() {
        doClose(ReturnStausType.RET_CANCEL);
    }

    @Override
    public void addActionListener(ActionListener listener) {
        listeners.add(listener);
    }

    @Override
    public void removeActionListener(ActionListener listener) {
        listeners.remove(listener);
    }
    /*
     @Override
     public void setVisible(final boolean visible) {
     // make sure that frame is marked as not disposed if it is asked to be visible
     //        if (visible) {
     //            setDisposed(false);
     //        }
     // let's handle visibility...
     if (!visible || !isVisible()) { // have to check this condition simply because super.setVisible(true) invokes toFront if frame was already visible
     super.setVisible(visible);
     }
     // ...and bring frame to the front.. in a strange and weird way
     if (visible) {
     int state = super.getExtendedState();
     state &= ~JFrame.ICONIFIED;
     super.setExtendedState(state);
     super.setAlwaysOnTop(true);
     super.toFront();
     super.requestFocus();
     super.setAlwaysOnTop(false);
     }
     if (textField != null) {
     textField.requestFocusInWindow();
     }
     }

     @Override
     public void toFront() {
     super.setVisible(true);
     int state = super.getExtendedState();
     state &= ~JFrame.ICONIFIED;
     super.setExtendedState(state);
     super.setAlwaysOnTop(true);
     super.toFront();
     super.requestFocus();
     super.setAlwaysOnTop(false);
     }
     */
    protected String ownerName = null;

    public String getOwnerName() {
        return ownerName;
    }

    public void setCaption(String title) {
        setTitle(title);
    }

    @Override
    public ContainerType getContainerType() {
        return ContainerType.TwoPanelInternalContainer;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelButton;
    private javax.swing.JPanel panelDetail;
    // End of variables declaration//GEN-END:variables

    @Override
    public JPanel getPanelSelecton() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setDividerLocation(int value) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JPanel getPanelParent() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
