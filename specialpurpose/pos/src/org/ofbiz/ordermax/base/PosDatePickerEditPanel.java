/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.base;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;
import org.ofbiz.base.util.Debug;
import org.ofbiz.guiapp.xui.XuiSession;

/**
 *
 * @author siranjeev
 */
public class PosDatePickerEditPanel extends javax.swing.JPanel {
    
    static public String module = PosDatePickerEditPanel.class.getName();

    /**
     * Creates new form DatePickerEditPanel
     */
    public PosDatePickerEditPanel() {
        initComponents();
        
    }
    protected XuiSession session = null;
    
    public XuiSession getSession() {
        return session;
    }
    
    public void setSession(XuiSession session) {
        this.session = session;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        txtDate = new PosObservingTextField();

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton1))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        final ClassLoader cl = this.getClassLoader();
//        Thread.currentThread().setContextClassLoader(cl);

        // TODO add your handling code here:
        String lang = null;
        final Locale locale = Locale.getDefault();//getLocale(lang);
        PosDatePicker dp = new PosDatePicker((PosObservingTextField) txtDate, locale);
        //previously Selectd date
        java.util.Date selectedDate = dp.parseDate(txtDate.getText());
        dp.setSelectedDate(selectedDate);
        dp.start(txtDate);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    public void setCurrentDate() {
        Calendar cal = Calendar.getInstance();       // get calendar instance
        cal.setTime(cal.getTime());                           // set cal to date
        cal.set(Calendar.HOUR_OF_DAY, 0);            // set hour to midnight
        cal.set(Calendar.MINUTE, 0);                 // set minute in hour
        cal.set(Calendar.SECOND, 0);                 // set second in minute
        cal.set(Calendar.MILLISECOND, 0);            // set millis in second
        setDate(cal.getTimeInMillis());
        //String lang = null;
        //final Locale locale = getLocale(lang);
        //DatePicker dp = new DatePicker((ObservingTextField) txtDate, locale);

        //txtDate.setText(new SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date(cal.getTimeInMillis())));
    }
    
    public void setDate(long millis) {
        Calendar cal = Calendar.getInstance();       // get calendar instance
        cal.setTime(new java.util.Date(millis));                           // set cal to date
        cal.set(Calendar.HOUR_OF_DAY, 0);            // set hour to midnight
        cal.set(Calendar.MINUTE, 0);                 // set minute in hour
        cal.set(Calendar.SECOND, 0);                 // set second in minute
        cal.set(Calendar.MILLISECOND, 0);            // set millis in second
        String lang = null;
        final Locale locale = getLocale(lang);
        DatePicker dp = new DatePicker((ObservingTextField) txtDate, locale);
        
        txtDate.setText(new SimpleDateFormat("dd/MM/yyyy").format(new java.util.Date(cal.getTimeInMillis())));
    }
    
    public java.sql.Timestamp getTimeStamp() {
        Calendar cal = Calendar.getInstance();       // get calendar instance
        java.sql.Timestamp date = new java.sql.Timestamp(cal.getTimeInMillis());
        String lang = null;
        final Locale locale = getLocale(lang);
        if (txtDate != null) {
            try {
                DatePicker dp = new DatePicker((ObservingTextField) txtDate, locale);
                if (dp != null) {
                    date = new java.sql.Timestamp(dp.parseDate(txtDate.getText()).getTime());
                }
            } catch (Exception ex) {
                Debug.logError(ex, module);
            }
        }
        return date;
    }
    
    public void setTimeStamp(java.sql.Timestamp date) {
        setDate(date.getTime());
        
    }
    
    private ClassLoader getClassLoader() {
        
        ClassLoader cl = null;
        try {
            cl = session.getClassLoader();
            
            if (cl == null) {
                try {
                    
                    cl = Thread.currentThread().getContextClassLoader();
                    
                } catch (Throwable t) {
                    
                }
                if (cl == null) {
                    try {
                        cl = this.getClass().getClassLoader();
                    } catch (Throwable t) {
                        Debug.logError(t, module);
                    }
                }
            }
        } catch (Exception e) {
            Debug.logError(e, module);
        }
        return cl;
    }
    
    private Locale getLocale(String loc) {
        if (loc != null && loc.length() > 0) {
            return new Locale(loc);
        } else {
            return Locale.getDefault();
        }
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField txtDate;
    // End of variables declaration//GEN-END:variables
}
