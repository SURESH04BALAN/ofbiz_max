/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.party;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AbstractDocument;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import org.ofbiz.base.util.Debug;
import org.ofbiz.entity.Delegator;
import org.ofbiz.entity.GenericEntityException;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.ordermax.base.BrandTreeNode;
import org.ofbiz.ordermax.base.DepartmentTreeNode;
import org.ofbiz.ordermax.base.PosProductHelper;
import org.ofbiz.ordermax.product.ProductTreeNode;
import org.ofbiz.ordermax.base.ProductRootTreeNode;
import org.ofbiz.ordermax.base.TreeNode;
import org.ofbiz.guiapp.xui.XuiSession;
import org.ofbiz.ordermax.product.tree.ProductSelectionTreePanel;
import org.ofbiz.ordermax.product.tree.ProductTreeModel;
import org.ofbiz.ordermax.base.TreeSelectionInterface;


/**
 *
 * @author siranjeev
 */
public class PartySelectionTreePanel extends javax.swing.JPanel implements TreeSelectionInterface {

    static final String module = PartySelectionTreePanel.class.getName();
    protected PartyTreeList partyTreeList = null;
    Delegator delegator = null;
    protected XuiSession session;
    private final HighlightTreeCellRenderer renderer = new HighlightTreeCellRenderer();
    protected TreeNode rootNode = null;

    /**
     * Creates new form ProductSelectionTreePanel
     */
    public PartySelectionTreePanel(String roleTypeId, XuiSession sessionVal) {
        initComponents();
        session = sessionVal;
        delegator = sessionVal.getDelegator();
        this.roleTypeId = roleTypeId;
        
        setupPanel();
    }

    public PartyTreeList getTreeDataList() {
        return partyTreeList;
    }
    
       String partyId = "";

    public void setPartyId(String id) {
        partyId = id;
    }

    public String getPartyId() {
        return partyId;
    }

    public void getTreeDataList(PartyTreeList productListArray) {
        this.partyTreeList = partyTreeList;
    }

    public TreeNode getRootNode() {
        return rootNode;
    }
    String roleTypeId;
    final public void loadTree() {
                
        partyTreeList = new PartyTreeList(session);
        partyTreeList.setTreeLoaded(false);
        partyTreeList.loadList(roleTypeId);

        rootNode = partyTreeList.getRootNode();
        ProductTreeModel productTreeModel = new ProductTreeModel(rootNode);
        tree.setModel(productTreeModel);
    }

    final public void setupPanel() {
        getClassLoader();
        final ClassLoader cl = this.getClassLoader();
        Thread.currentThread().setContextClassLoader(cl);
        loadTree();

        editFindId.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                if (rbDescription.isSelected()) {
                    fireDocumentChangeEvent();
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                if (rbDescription.isSelected()) {
                    fireDocumentChangeEvent();
                }

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }
        });

        tree.setCellRenderer(renderer);
//        renderer.q = editFindId.getText();
//        fireDocumentChangeEvent();
        DocumentFilter filter = new UppercaseDocumentFilter();
        ((AbstractDocument) editFindId.getDocument()).setDocumentFilter(filter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgFindSelection = new javax.swing.ButtonGroup();
        btnFindProduct = new javax.swing.JButton();
        btnAddSelected = new javax.swing.JButton();
        editFindId = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        jRadioButton1 = new javax.swing.JRadioButton();
        rbScanCode = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        rbDescription = new javax.swing.JRadioButton();

        setMaximumSize(new java.awt.Dimension(230, 2147483647));
        setMinimumSize(new java.awt.Dimension(230, 173));
        setPreferredSize(new java.awt.Dimension(230, 551));
        setLayout(new java.awt.GridBagLayout());

        btnFindProduct.setText("Find");
        btnFindProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindProductActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 0, 0);
        add(btnFindProduct, gridBagConstraints);

        btnAddSelected.setText("Add Selected");
        btnAddSelected.setActionCommand("");
        btnAddSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSelectedActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        add(btnAddSelected, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        add(editFindId, gridBagConstraints);

        jScrollPane3.setPreferredSize(new java.awt.Dimension(220, 322));

        tree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                treeTreeWillExpand(evt);
            }
        });
        tree.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                treeVetoableChange(evt);
            }
        });
        jScrollPane3.setViewportView(tree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 220;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane3, gridBagConstraints);

        bgFindSelection.add(jRadioButton1);
        jRadioButton1.setText("Account Code");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDescriptionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        add(jRadioButton1, gridBagConstraints);

        bgFindSelection.add(rbScanCode);
        rbScanCode.setText("ACN");
        rbScanCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDescriptionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        add(rbScanCode, gridBagConstraints);

        bgFindSelection.add(jRadioButton3);
        jRadioButton3.setText("ABN");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDescriptionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        add(jRadioButton3, gridBagConstraints);

        bgFindSelection.add(rbDescription);
        rbDescription.setSelected(true);
        rbDescription.setText("Description");
        rbDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDescriptionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 0);
        add(rbDescription, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindProductActionPerformed

        String tmpproductId = editFindId.getText();
        if (rbScanCode.isSelected()) {

            GenericValue scanVal = PosProductHelper.getProductFromScanCode(tmpproductId, PosProductHelper.GoodIdentificationTypeIdEAN, delegator);

            if (scanVal != null) {
                String productId = scanVal.getString("productId");
                findProduct(productId);
                //				}
            }

        } else {
            final String productId = tmpproductId;

            if (!SwingUtilities.isEventDispatchThread()) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        // save the changes
                        findProduct(productId);
                    }
                });
            } else {
                Debug.logError("no thread true", "Module");
                // save the changes
                findProduct(productId);
            }
        }
    }//GEN-LAST:event_btnFindProductActionPerformed

    void clearFields() {
    }
    public void findFromId(String id){
        findProduct(id);  
    }

    void findProduct(String productId) {
/*        try {
            TreePath root = tree.getPathForRow(0);

            TreeNode searchNode = (TreeNode) productListArray.getProductFromId(productId);
            Debug.logInfo("searchNode: " + searchNode.toString(), module);
//            collapseAll(tree, root);

            if (!searchNode.toString().isEmpty()) {
                renderer.setQ(searchNode.toString());
                isExpanedFirst = false;
                searchTree(tree, root, searchNode.toString());
            }
            /*        
             searchTree();
            
             TreeNode searchNode = (TreeNode) productListArray.getProductFromId(productId);
             if (searchNode != null) {

             TreeNode[] nodes =  tree.getModel())..getPathToRoot(searchNode);
             TreePath tpath = new TreePath(nodes);
             tree.scrollPathToVisible(tpath);
             tree.setSelectionPath(tpath);
             }
             
        } catch (Exception ex) {
            Logger.getLogger(ProductSelectionTreePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        */
    }

    private void btnAddSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSelectedActionPerformed


        GenericValue scanVal = PosProductHelper.getProductFromScanCode(editFindId.getText(), PosProductHelper.GoodIdentificationTypeIdEAN, delegator);

        if (scanVal != null) {
            String productId = scanVal.getString("productId");
            findProduct(productId);
            //				}

        } else {
            //            m_pos.getPromoStatusBar().displayMessage("Unable to find product with scan id: " + editScanCode.getText());
            clearFields();
        }
    }//GEN-LAST:event_btnAddSelectedActionPerformed

    private void treeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_treeTreeWillExpand
        // TODO add your handling code here:
    }//GEN-LAST:event_treeTreeWillExpand

    private void treeVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_treeVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_treeVetoableChange

    private void rbDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDescriptionActionPerformed
        // TODO add your handling code here:
        editFindId.setText("");
    }//GEN-LAST:event_rbDescriptionActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgFindSelection;
    private javax.swing.JButton btnAddSelected;
    private javax.swing.JButton btnFindProduct;
    private javax.swing.JTextField editFindId;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton rbDescription;
    private javax.swing.JRadioButton rbScanCode;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables

    public JButton getBtnAddSelected() {
        return btnAddSelected;
    }

    public void setBtnAddSelected(JButton btnAddSelected) {
        this.btnAddSelected = btnAddSelected;
    }

 
    protected TreeNode GetRecusevilyNodeType(TreeNode parent, TreePath tp, String nodeType) {
        TreeNode child = null;
        if (parent.getNodeName().equals(nodeType)) {
            child = parent;
        }

        if (child == null) {
//            TreeNode node = (TreeNode) tp.getLastPathComponent();
//            if (node != null) {

            TreePath parentPath = tp.getParentPath();
            if (parentPath != null) {
                TreeNode currTreeParentNode = (TreeNode) parentPath.getLastPathComponent();
                child = GetRecusevilyNodeType(currTreeParentNode, parentPath, nodeType);
            }
            //          }
        }
        return child;
    }

    public JTree getTree() {
        return tree;
    }
    public JPanel getContainerPanel(){
        return this;
    }
    private ClassLoader getClassLoader() {
        ClassLoader cl = session.getClassLoader();
        if (cl == null) {
            try {
                cl = Thread.currentThread().getContextClassLoader();
            } catch (Throwable t) {
            }
            if (cl == null) {
//                Debug.log("No context classloader available; using class classloader", module);
                try {
                    cl = this.getClass().getClassLoader();
                } catch (Throwable t) {
                    //                  Debug.logError(t, module);
                }
            }
        }
        return cl;
    }

    public ProductTreeNode getSelectedProductTreeNode() {
        ProductTreeNode selNode = null;
        TreePath tp = getTree().getSelectionPath();
        if (tp != null) {
            TreeNode node = (TreeNode) tp.getLastPathComponent();
            if (node != null && node.getNodeName().equals(ProductTreeNode.ProdutNodeName)) {
                selNode = (ProductTreeNode) node;
            }
        }
        return selNode;
    }

    public TreeNode getSelectedParentTreeNode() {
        TreeNode selNode = null;

        TreePath tp = getTree().getSelectionPath();
        if (tp != null) {
            TreePath parentPath = tp.getParentPath();
            if (parentPath != null) {
                selNode = (TreeNode) parentPath.getLastPathComponent();
            }
        }
        return selNode;
    }

    public List<TreeNode> getAllChildTreeNode(){
      List<TreeNode> selNodeList = new ArrayList<TreeNode>();
      return selNodeList;
    }

    public TreeNode getSelectedChildTreeNode() {
        TreeNode selNode = null;

        TreePath tp = getTree().getSelectionPath();
        if (tp != null) {
            TreeNode node = (TreeNode) tp.getLastPathComponent();
            if (node != null) {
                selNode = (TreeNode) tree.getModel().getChild(node, 0);
            }
        }
        return selNode;
    }
    public TreeNode getSelectedTreeNode(String typeName) {
        TreeNode selNode = null;
        TreePath tp = getTree().getSelectionPath();
        if (tp != null) {
            TreeNode node  = (TreeNode) tp.getLastPathComponent();
            if (node != null && node.getNodeName().equals(typeName)) {
                selNode = node;
            }
        }
        return selNode;
    }

    public List<TreeNode> getAllSelectedTreeNode(String typeName) {
        List<TreeNode> selNodeList = new ArrayList<TreeNode>();
//        TreePath tp = getTree().getS.getSelectionPath();

        TreeNode node = (TreeNode) tree.getLastSelectedPathComponent();
        if (node != null) {
            GetRecusevilyAllProductNode(node, selNodeList, typeName);

        }

        List<TreeNode> prodNodeList = new ArrayList<TreeNode>();
        for (TreeNode prodnode : selNodeList) {
            prodNodeList.add(prodnode);
        }

        return prodNodeList;
    }

    protected void GetRecusevilyAllProductNode(TreeNode parent, List<TreeNode> list, String nodeType) {
        Debug.logInfo("GetRecusevilyAllProductNode", module);
        if (parent != null) {

            if (parent.getNodeName().equals(nodeType)) {
                Debug.logInfo(parent._id, module);
                list.add(parent);
            }

            int count = parent.getChildCount();
            Debug.logInfo("Child Count: " + (new Integer(count)).toString(), module);
            for (int index = 0; index < count; ++index) {
                TreeNode child = (TreeNode) parent.getChild(index);
                GetRecusevilyAllProductNode(child, list, nodeType);
            }
        }
    }

    private void fireDocumentChangeEvent() {
        String q = editFindId.getText();
        renderer.setQ(q);
        TreePath root = tree.getPathForRow(0);
        collapseAll(tree, root);
        if (!q.isEmpty()) {
            isExpanedFirst = false;
            searchTree(tree, root, q);
        }
        //tree.repaint();
    }
    static boolean isExpanedFirst = false;

    private static void searchTree(JTree tree, TreePath path, String q) {
        TreeNode node = (TreeNode) path.getLastPathComponent();
        if (node == null) {
            return;
        }
        if (node.toString().contains(q)) {
            tree.expandPath(path.getParentPath());
            if (isExpanedFirst == false) {
                tree.scrollPathToVisible(path);
                tree.setSelectionPath(path);
                isExpanedFirst = true;
            }
        }
        int childCount = node.getChildCount();
        if (node.isHasChildrean() && childCount >= 0) {
            // Enumeration e = node.children();
            //while (e.hasMoreElements()) {
            //    searchTree(tree, path.pathByAddingChild(e.nextElement()), q);
            //}
            for (int index = 0; index < childCount; index++) {
//            Enumeration e = node.children();
//            while (e.hasMoreElements()) {
                TreeNode n = (TreeNode) node.getChild(index);//.nextElement();

                searchTree(tree, path.pathByAddingChild(n), q);
            }
        }
    }

    private static void collapseAll(JTree tree, TreePath parent) {
        TreeNode node = (TreeNode) parent.getLastPathComponent();
        int childCount = node.getChildCount();
        if (node.isHasChildrean() && childCount >= 0) {
            for (int index = 0; index < childCount; index++) {
//            Enumeration e = node.children();
//            while (e.hasMoreElements()) {
                TreeNode n = (TreeNode) node.getChild(index);//.nextElement();
                TreePath path = parent.pathByAddingChild(n);
                collapseAll(tree, path);
            }
        }
        tree.collapsePath(parent);
    }

    public TreeNode getParentNode(TreeNode childNode) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
class HighlightTreeCellRenderer extends DefaultTreeCellRenderer {

    private static final Color rollOverRowColor = new Color(220, 240, 255);
    private String q = null;

    public String getQ() {
        return q;
    }

    public void setQ(String val) {
        if (val != null) {
            this.q = val.toUpperCase();
        }
    }

    @Override
    public void updateUI() {
        setTextSelectionColor(null);
        setTextNonSelectionColor(null);
        setBackgroundSelectionColor(null);
        setBackgroundNonSelectionColor(null);
        super.updateUI();
    }
    boolean rollOver = false;

    @Override
    public Color getBackgroundNonSelectionColor() {
        return rollOver ? super.getBackgroundSelectionColor()/*rollOverRowColor*/ : super.getBackgroundNonSelectionColor();
    }

    @Override
    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected,
            boolean expanded, boolean leaf, int row, boolean hasFocus) {
        JComponent c = (JComponent) super.getTreeCellRendererComponent(tree, value, isSelected, expanded, leaf, row, hasFocus);
        if (isSelected) {
            c.setForeground(getTextSelectionColor());
        } else {
            rollOver = q != null && !q.isEmpty() && value.toString().contains(q);
            c.setForeground(getTextNonSelectionColor());
            c.setBackground(getBackgroundNonSelectionColor());
        }
        return c;
    }
}

class UppercaseDocumentFilter extends DocumentFilter {

    public void insertString(DocumentFilter.FilterBypass fb, int offset,
            String text, javax.swing.text.AttributeSet attr) throws BadLocationException {

        fb.insertString(offset, text.toUpperCase(), attr);
    }

    public void replace(DocumentFilter.FilterBypass fb, int offset, int length,
            String text, javax.swing.text.AttributeSet attrs) throws BadLocationException {

        fb.replace(offset, length, text.toUpperCase(), attrs);
    }

    public TreeNode getParentNode(TreeNode childNode){
         return null;
     }   

}