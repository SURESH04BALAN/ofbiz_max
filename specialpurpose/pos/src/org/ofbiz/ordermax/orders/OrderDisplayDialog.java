/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.orders;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.TableColumn;
import org.ofbiz.accounting.invoice.InvoiceWorker;
import org.ofbiz.base.util.Debug;
import org.ofbiz.base.util.UtilDateTime;
import org.ofbiz.entity.GenericEntityException;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.guiapp.xui.XuiSession;
import org.ofbiz.order.order.OrderReadHelper;
import org.ofbiz.ordermax.base.OrderMaxOptionPane;
import org.ofbiz.pos.PosTransaction;
import org.ofbiz.pos.generic.*;
import org.ofbiz.pos.screen.PosScreen;

/**
 *
 * @author sureshbalan
 */
public class OrderDisplayDialog extends javax.swing.JDialog {

    public static final String module = OrderDisplayDialog.class.getName();
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */

    String[][] findInvoiceColumnName = {
        {"posSku", "Sku", "java.lang.String"},
        {"posItemName", "Item", "java.lang.String"},
        {"posQty", "Quantity", "java.lang.String"},
        {"posItemPrice", "List Price", "java.lang.String"},
        {"posAmount", "Amt", "java.lang.String"},};

    public static final int RET_OK = 1;
    protected PosScreen pos;
    protected PosTransaction trans;
    protected boolean salesOrders = true;
    protected XuiSession session = null;
    /**
     * Creates new form OrderDisplayDialog
     */
    public OrderDisplayDialog(java.awt.Frame parent, boolean modal, PosScreen pos, PosTransaction trans, boolean salesOrders) {
        super(parent, modal);
        initComponents();
        this.pos = pos;
        this.trans = trans;
        this.salesOrders = salesOrders;
        this.session = pos.getSession();
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });

        loadCurrentOrderList();
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        btnFirstOrder = new javax.swing.JButton();
        btnPreviousOrder = new javax.swing.JButton();
        btnNextOrder = new javax.swing.JButton();
        btnLastOrder = new javax.swing.JButton();
        btnFindSelection = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblInvoiceId = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        lblInvoiceAmt = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblTxDate = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        lblFacilityId = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        lblOrderId = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        lblPaidAmount = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblCounter = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        lblProductStoreId = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        lblTxId = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lblBalanceAmt = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        lblClarkId = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        lblStatusId = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        lblOrderTypeId = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        lblOrderName = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        lblExternalName = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        lblPartyId = new javax.swing.JLabel();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        btnFirstOrder.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFirstOrder.setText("|<");
        btnFirstOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstOrderActionPerformed(evt);
            }
        });

        btnPreviousOrder.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnPreviousOrder.setText("<");
        btnPreviousOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousOrderActionPerformed(evt);
            }
        });

        btnNextOrder.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNextOrder.setText(">");
        btnNextOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextOrderActionPerformed(evt);
            }
        });

        btnLastOrder.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnLastOrder.setText(">|");
        btnLastOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastOrderActionPerformed(evt);
            }
        });

        btnFindSelection.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnFindSelection.setText("Find");
        btnFindSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindSelectionActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setText("Reprint");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFirstOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPreviousOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNextOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLastOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFindSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnFirstOrder, btnLastOrder, btnNextOrder, btnPreviousOrder});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLastOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnNextOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFindSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnPreviousOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnFirstOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);
        getRootPane().setDefaultButton(okButton);
        getRootPane().setDefaultButton(okButton);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setShowHorizontalLines(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(624, 100));
        jPanel3.setLayout(new java.awt.GridLayout(0, 4));

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Invoice No:  ");
        jPanel4.add(jLabel1);

        lblInvoiceId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel4.add(lblInvoiceId);

        jPanel3.add(jPanel4);

        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Invoice Amount:  ");
        jPanel7.add(jLabel6);

        lblInvoiceAmt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblInvoiceAmt.setText("jLabel7");
        jPanel7.add(lblInvoiceAmt);

        jPanel3.add(jPanel7);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Date:  ");
        jLabel2.setMaximumSize(new java.awt.Dimension(55, 14));
        jLabel2.setMinimumSize(new java.awt.Dimension(55, 14));
        jLabel2.setPreferredSize(new java.awt.Dimension(55, 14));
        jPanel5.add(jLabel2);

        lblTxDate.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel5.add(lblTxDate);

        jPanel3.add(jPanel5);

        jPanel14.setLayout(new java.awt.GridLayout(1, 0));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Facility Id:  ");
        jPanel14.add(jLabel11);

        lblFacilityId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel14.add(lblFacilityId);

        jPanel3.add(jPanel14);

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Order Id:  ");
        jPanel10.add(jLabel5);

        lblOrderId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel10.add(lblOrderId);

        jPanel3.add(jPanel10);

        jPanel8.setLayout(new java.awt.GridLayout(1, 0));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Paid Amount:  ");
        jPanel8.add(jLabel8);

        lblPaidAmount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblPaidAmount.setText("jLabel9");
        jPanel8.add(lblPaidAmount);

        jPanel3.add(jPanel8);

        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Counter:  ");
        jPanel6.add(jLabel3);

        lblCounter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblCounter.setText("jLabel5");
        jPanel6.add(lblCounter);

        jPanel3.add(jPanel6);

        jPanel13.setLayout(new java.awt.GridLayout(1, 0));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Product Store:  ");
        jPanel13.add(jLabel10);

        lblProductStoreId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel13.add(lblProductStoreId);

        jPanel3.add(jPanel13);

        jPanel11.setLayout(new java.awt.GridLayout(1, 0));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Tx Id:  ");
        jPanel11.add(jLabel7);

        lblTxId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel11.add(lblTxId);

        jPanel3.add(jPanel11);

        jPanel9.setLayout(new java.awt.GridLayout(1, 0));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Balance Amount:  ");
        jPanel9.add(jLabel4);

        lblBalanceAmt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblBalanceAmt.setText("jLabel9");
        jPanel9.add(lblBalanceAmt);

        jPanel3.add(jPanel9);

        jPanel12.setLayout(new java.awt.GridLayout(1, 0));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Clark Id:  ");
        jPanel12.add(jLabel9);

        lblClarkId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel12.add(lblClarkId);

        jPanel3.add(jPanel12);

        jPanel15.setLayout(new java.awt.GridLayout(1, 0));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Order Status:  ");
        jPanel15.add(jLabel12);

        lblStatusId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel15.add(lblStatusId);

        jPanel3.add(jPanel15);

        jPanel16.setLayout(new java.awt.GridLayout(1, 0));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Order Type:  ");
        jPanel16.add(jLabel13);

        lblOrderTypeId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel16.add(lblOrderTypeId);

        jPanel3.add(jPanel16);

        jPanel17.setLayout(new java.awt.GridLayout(1, 0));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Order Name:  ");
        jPanel17.add(jLabel14);

        lblOrderName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel17.add(lblOrderName);

        jPanel3.add(jPanel17);

        jPanel18.setLayout(new java.awt.GridLayout(1, 0));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("External Name:  ");
        jPanel18.add(jLabel15);

        lblExternalName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel18.add(lblExternalName);

        jPanel3.add(jPanel18);

        jPanel19.setLayout(new java.awt.GridLayout(1, 0));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Party Id:  ");
        jPanel19.add(jLabel16);

        lblPartyId.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel19.add(lblPartyId);

        jPanel3.add(jPanel19);

        getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void btnFirstOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstOrderActionPerformed
        currentRecord = 0;
        displayOrder(currentRecord);

    }//GEN-LAST:event_btnFirstOrderActionPerformed

    private void btnPreviousOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousOrderActionPerformed
        // TODO add your handling code here:
        if (--currentRecord < 0) {
            currentRecord = 0;
        }

        displayOrder(currentRecord);
    }//GEN-LAST:event_btnPreviousOrderActionPerformed

    private void btnNextOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextOrderActionPerformed
        if (++currentRecord > (invoiceList.size() - 1)) {
            currentRecord = invoiceList.size() - 1;
        }

        displayOrder(currentRecord);
    }//GEN-LAST:event_btnNextOrderActionPerformed

    private void btnLastOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastOrderActionPerformed
        currentRecord = invoiceList.size() - 1;
        displayOrder(currentRecord);
    }//GEN-LAST:event_btnLastOrderActionPerformed

    private void btnFindSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindSelectionActionPerformed
        OrderFindSelectionDlg dlg  = new OrderFindSelectionDlg(null, true, session);
        dlg.setVisible(true);
        java.sql.Timestamp dayEnd = new java.sql.Timestamp(dlg.getEndDate().getTime());  
        java.sql.Timestamp dayStart = new java.sql.Timestamp(dlg.getStartDate().getTime());  
        Debug.logInfo(" dayStart: " + dayStart.toString(), module);
        Debug.logInfo(" closedDate: " + dayEnd.toString(), module);
        if(salesOrders){
            invoiceList = OrderFindHelper.getSalesInvoicesForGivenDatePeriod(pos.getSession().getDelegator(), dayStart, dayEnd);//
        }
        else{
            invoiceList = OrderFindHelper.getPurchaseInvoicesForGivenDatePeriod(pos.getSession().getDelegator(), dayStart, dayEnd);//            
        }
        currentRecord = invoiceList.size() - 1;
        displayOrder(currentRecord);        
    }//GEN-LAST:event_btnFindSelectionActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    protected List<Map<String, Object>> dataArray = new ArrayList<Map<String, Object>>();
    List<GenericValue> invoiceList = null;
    int currentRecord = 0;

    void loadCurrentOrderList() {

        PosTransaction trans = PosTransaction.getCurrentTx(pos.getSession());
        if (!trans.isOpen()) {
            OrderMaxOptionPane.showMessageDialog(null, "dialog/error/terminalclosed");
            return;
        }

        GenericValue state = null;
        if (state == null) {
            state = trans.getTerminalState();
        }
        //    state.getTimestamp("openedDate").setMonth(1);
        java.sql.Timestamp dayStart = state.getTimestamp("openedDate");
        java.sql.Timestamp dayEnd = state.getTimestamp("closedDate");
        if (dayEnd == null) {
            dayEnd = UtilDateTime.nowTimestamp();
        }

        Debug.logInfo(" dayStart: " + dayStart.toString(), module);
        Debug.logInfo(" closedDate: " + dayEnd.toString(), module);
        if(salesOrders){
            invoiceList = OrderFindHelper.getSalesInvoicesForGivenDatePeriod(pos.getSession().getDelegator(), dayStart, dayEnd);//
        }
        else{
            invoiceList = OrderFindHelper.getPurchaseInvoicesForGivenDatePeriod(pos.getSession().getDelegator(), dayStart, dayEnd);//            
        }
        currentRecord = invoiceList.size() - 1;
        displayOrder(currentRecord);
    }
    void displayOrder(int id) {
        try {
            String orderId = "";
            dataArray = new ArrayList<Map<String, Object>>();
            if (invoiceList != null && invoiceList.isEmpty() == false && id < invoiceList.size()) {
                GenericValue invoice = invoiceList.get(id);
//                GenericValue invoice = invoiceList.get(0);
                BigDecimal notApplied = BigDecimal.TEN;
                String invoiceId = "";

                BigDecimal totalPurchaseAmount = BigDecimal.ZERO;
                BigDecimal totalPaidAmount = BigDecimal.ZERO;
                BigDecimal totalUnpaidAmount = BigDecimal.ZERO;

                String createdBy = "";
                String counterId = "";
                String partyId = "";
                lblInvoiceId.setText(invoice.getString("invoiceId"));
                lblTxDate.setText(invoice.getTimestamp("invoiceDate").toString());
                List<String> processedOrderId = new ArrayList<String>();
                List<GenericValue> orderItemBillings = invoice.getRelated("OrderItemBilling");
                for (GenericValue billing : orderItemBillings) {
                    String orderIdStr = billing.getString("orderId");
                    boolean found = false;
                    for (String orderid : processedOrderId) {
                        if (orderid.equals(orderIdStr)) {
                            found = true;
                            break;
                        }
                    }

                    if (found == false) {
                        processedOrderId.add(orderIdStr);

                        OrderReadHelper orderReadHelper = new OrderReadHelper(OrderReadHelper.getOrderHeader(pos.getSession().getDelegator(), orderIdStr));
                        invoiceId = billing.getString("invoiceId");
                        orderId = billing.getString("orderId");

                        String msg = "Invoice Saved ";
                        if (orderReadHelper != null) {
                            List<GenericValue> orderItems = orderReadHelper.getOrderItems();

                            Map<String, Object> line = new HashMap<String, Object>();
                            for (GenericValue orderItem : orderItems) {
                                String idStr = orderItem.getString("orderId") + "_" + orderItem.getString("orderItemSeqId");
                                line.put(idStr, orderItem);
                                Debug.logInfo(idStr, module);
                            }

                            for (Map.Entry<String, Object> entryMap : line.entrySet()) {
                                GenericValue orderItem = (GenericValue) entryMap.getValue();

                                // for (GenericValue orderItem : orderItems) {
                                Map<String, Object> itemInfo = orderReadHelper.getItemInfoMap(orderItem);

                                BigDecimal saleLineTotal = orderReadHelper.getOrderItemTotal(orderItem);
                                BigDecimal itemPrice = orderItem.getBigDecimal("unitPrice");
                                addRowToTable(orderItem.getString("productId"), orderItem.getString("itemDescription"), orderItem.getBigDecimal("quantity"), itemPrice, saleLineTotal);
                            }

                            BigDecimal purchaseAmount = orderReadHelper.getOrderGrandTotal();
                            BigDecimal paidAmount = InvoiceWorker.getInvoiceApplied(pos.getSession().getDelegator(), invoiceId);
                            BigDecimal unpaidAmount = InvoiceWorker.getInvoiceNotApplied(pos.getSession().getDelegator(), invoiceId);

                            totalPurchaseAmount = totalPurchaseAmount.add(purchaseAmount);
                            totalPaidAmount = totalPaidAmount.add(paidAmount);
                            totalUnpaidAmount = totalUnpaidAmount.add(unpaidAmount);
                            createdBy = orderReadHelper.getOrderHeader().getString("createdBy");
                            counterId = orderReadHelper.getOrderHeader().getString("terminalId");

                            lblFacilityId.setText(orderReadHelper.getOrderHeader().getString("originFacilityId"));
                            lblProductStoreId.setText(orderReadHelper.getOrderHeader().getString("productStoreId"));
                            lblStatusId.setText(orderReadHelper.getOrderHeader().getString("statusId"));
                            lblExternalName.setText(orderReadHelper.getOrderHeader().getString("externalId"));
                            lblOrderName.setText(orderReadHelper.getOrderHeader().getString("orderName"));
                            lblOrderTypeId.setText(orderReadHelper.getOrderHeader().getString("orderTypeId"));
                            if (salesOrders) {
                                partyId = orderReadHelper.getBillToParty().getString("partyId");
                            } else {
                                partyId = orderReadHelper.getBillFromParty().getString("partyId");
                            }
                        }
                    }
                }

                lblPaidAmount.setText(totalPaidAmount.toString());
                lblBalanceAmt.setText(totalUnpaidAmount.toString());
                lblInvoiceAmt.setText(totalPurchaseAmount.toString());
                lblOrderId.setText(orderId);
                lblCounter.setText(counterId);
                lblClarkId.setText(createdBy);
                lblPartyId.setText(partyId);
            }

            MapValueTableDataModel model = new org.ofbiz.pos.generic.MapValueTableDataModel(findInvoiceColumnName);
            jTable1.setModel(model);
            model.addMapRows(dataArray);
            for (int i = 0; i < model.getColumnCount(); ++i) {
                TableColumn column = jTable1.getColumnModel().getColumn(i);
                column.setPreferredWidth(model.getColumnWidth(i));
            }

            setCaption(orderId);
        } catch (GenericEntityException e) {

            Debug.logError(e, module);

        }
    }
/*
   
    void displayOrder(int id) {
        try {
            String orderId = "";
            dataArray = new ArrayList<Map<String, Object>>();
            if (invoiceList != null && invoiceList.isEmpty() == false && id < invoiceList.size()) {
                GenericValue invoice = invoiceList.get(id);
//                GenericValue invoice = invoiceList.get(0);
                BigDecimal notApplied = BigDecimal.TEN;
                String invoiceId = "";

                BigDecimal totalPurchaseAmount = BigDecimal.ZERO;
                BigDecimal totalPaidAmount = BigDecimal.ZERO;
                BigDecimal totalUnpaidAmount = BigDecimal.ZERO;

                String createdBy = "";
                String counterId = "";
                String partyId = "";
                lblInvoiceId.setText(invoice.getString("invoiceId"));
                lblTxDate.setText(invoice.getTimestamp("invoiceDate").toString());

                List<GenericValue> orderItemBillings = invoice.getRelated("OrderItemBilling");
                for (GenericValue billing : orderItemBillings) {
                    OrderReadHelper orderReadHelper = new OrderReadHelper(OrderReadHelper.getOrderHeader(pos.getSession().getDelegator(), billing.getString("orderId")));
                    invoiceId = billing.getString("invoiceId");
                    orderId = billing.getString("orderId");

                    String msg = "Invoice Saved ";
                    if (orderReadHelper != null) {
                        List<GenericValue> orderItems = orderReadHelper.getOrderItems();

                        for (GenericValue orderItem : orderItems) {
                            Map<String, Object> itemInfo = orderReadHelper.getItemInfoMap(orderItem);

                            BigDecimal saleLineTotal = orderReadHelper.getOrderItemTotal(orderItem);
                            BigDecimal itemPrice = orderItem.getBigDecimal("unitPrice");
                            addRowToTable(orderItem.getString("productId"), orderItem.getString("itemDescription"), orderItem.getBigDecimal("quantity"), itemPrice, saleLineTotal);
                        }

                        BigDecimal purchaseAmount = orderReadHelper.getOrderGrandTotal();
                        BigDecimal paidAmount = InvoiceWorker.getInvoiceApplied(pos.getSession().getDelegator(), invoiceId);
                        BigDecimal unpaidAmount = InvoiceWorker.getInvoiceNotApplied(pos.getSession().getDelegator(), invoiceId);

                        totalPurchaseAmount = totalPurchaseAmount.add(purchaseAmount);
                        totalPaidAmount = totalPaidAmount.add(paidAmount);
                        totalUnpaidAmount = totalUnpaidAmount.add(unpaidAmount);
                        createdBy = orderReadHelper.getOrderHeader().getString("createdBy");
                        counterId = orderReadHelper.getOrderHeader().getString("terminalId");

                        lblFacilityId.setText(orderReadHelper.getOrderHeader().getString("originFacilityId"));
                        lblProductStoreId.setText(orderReadHelper.getOrderHeader().getString("productStoreId"));
                        lblStatusId.setText(orderReadHelper.getOrderHeader().getString("statusId"));
                        lblExternalName.setText(orderReadHelper.getOrderHeader().getString("externalId"));
                        lblOrderName.setText(orderReadHelper.getOrderHeader().getString("orderName"));
                        lblOrderTypeId.setText(orderReadHelper.getOrderHeader().getString("orderTypeId"));
                        if(salesOrders){
                            partyId = orderReadHelper.getBillToParty().getString("partyId");
                        }
                        else{
                            partyId = orderReadHelper.getBillFromParty().getString("partyId");                            
                        }
                    }
                }

                lblPaidAmount.setText(totalPaidAmount.toString());
                lblBalanceAmt.setText(totalUnpaidAmount.toString());
                lblInvoiceAmt.setText(totalPurchaseAmount.toString());
                lblOrderId.setText(orderId);
                lblCounter.setText(counterId);
                lblClarkId.setText(createdBy);
                lblPartyId.setText(partyId);
            }

            MapValueTableDataModel model = new org.ofbiz.pos.generic.MapValueTableDataModel(findInvoiceColumnName);
            jTable1.setModel(model);
            model.addMapRows(dataArray);
            for (int i = 0; i < model.getColumnCount(); ++i) {
                TableColumn column = jTable1.getColumnModel().getColumn(i);
                column.setPreferredWidth(model.getColumnWidth(i));
            }

            setCaption(orderId);
        } catch (GenericEntityException e) {

            Debug.logError(e, module);

        }
    }
*/
    public void addRowToTable(String sku, String itemName, BigDecimal qty, BigDecimal unitPrice, BigDecimal amount) {
        Map<String, Object> line = new HashMap<String, Object>();

        line.put("posSku", sku);
        line.put("posItemName", itemName);
        line.put("posQty", qty);
        line.put("posItemPrice", unitPrice);
        line.put("posAmount", amount);
        //line.put("itemBalanceValue", itemBalanceValue);

        dataArray.add(line);

    }

    void appendEmpty() {
        addRowToTable("", "", BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderDisplayDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderDisplayDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderDisplayDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderDisplayDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                OrderDisplayDialog dialog = new OrderDisplayDialog(new javax.swing.JFrame(), true, null, null, false);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public void setCaption(String orderId) {
        String caption = "Invoice look up[" + (currentRecord + 1) + "/" + invoiceList.size() + "] - " + orderId;
        this.setTitle(caption);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFindSelection;
    private javax.swing.JButton btnFirstOrder;
    private javax.swing.JButton btnLastOrder;
    private javax.swing.JButton btnNextOrder;
    private javax.swing.JButton btnPreviousOrder;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblBalanceAmt;
    private javax.swing.JLabel lblClarkId;
    private javax.swing.JLabel lblCounter;
    private javax.swing.JLabel lblExternalName;
    private javax.swing.JLabel lblFacilityId;
    private javax.swing.JLabel lblInvoiceAmt;
    private javax.swing.JLabel lblInvoiceId;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblOrderName;
    private javax.swing.JLabel lblOrderTypeId;
    private javax.swing.JLabel lblPaidAmount;
    private javax.swing.JLabel lblPartyId;
    private javax.swing.JLabel lblProductStoreId;
    private javax.swing.JLabel lblStatusId;
    private javax.swing.JLabel lblTxDate;
    private javax.swing.JLabel lblTxId;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}
