/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.payment;

import javax.swing.JButton;

/**
 *
 * @author siranjeev
 */
public class PaymentButtonPanel extends javax.swing.JPanel {

    
    /**
     * Creates new form ProductButtonPanel
     */
    public PaymentButtonPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnAllocate = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("DELETE");

        btnAllocate.setText("ALLOCATE");
        btnAllocate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllocateActionPerformed(evt);
            }
        });

        cancelButton.setText("CANCEL");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        btnAccept.setText("ACCEPT");

        okButton.setText("OK");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(386, Short.MAX_VALUE)
                .addComponent(btnAllocate, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(btnDelete)
                    .addComponent(btnSave)
                    .addComponent(btnAccept)
                    .addComponent(btnAllocate))
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        /*Delegator delegator = (Delegator) session.getDelegator();
        
        if (jTabbedPane1.getSelectedIndex() == PRODUCT_TAB_INDEX) {
            if (isValidFields() == false) {
                return;
            }
            // save the changes
            save();
            loadProductTree();
        } else if (jTabbedPane1.getSelectedIndex() == BRAND_TAB_INDEX) {
            try {

                String depId = getDepartmentCode();
                String depName = getDepartmentName();
                String brandName = editBrandName.getText();

                String brandId = depId + "_" + brandName.replaceAll("\\s", "");

                if (brandId != null && brandId.length() > 20) {
                    brandId = brandId.substring(0, 19);
                }
                editBrandId.setText(brandId);
                BrandTreeNode brandNode = new BrandTreeNode(brandId, brandName, false);
                //GenericValue genvalBrand = brandNode.loadDetails(brandId, delegator);
                //if (genvalBrand == null) {
                    //                    brandNode.
                    //                    brandNode.creatGenericValue(delegator);
                    GenericValue brandCategory = PosProductHelper.getProductCategory(brandId, delegator);
                    if (brandCategory == null) {
                        delegator.create(PosProductHelper.createProductCategory(brandId, depId, "CATALOG_CATEGORY", brandName, delegator));
                    }

                    GenericValue rollUp = PosProductHelper.getProductCategoryRollup(brandId, depId, delegator);
                    if (rollUp == null) {
                        rollUp = PosProductHelper.createProductCategoryRollup(brandId, depId, delegator);
                        delegator.create(rollUp);
                        Debug.logInfo("create [createProductCategoryRollup] " + rollUp, module);
                    }

                    loadProductTree();
                    //}

                //now add the node to tree

            } catch (GenericEntityException ex) {
                Logger.getLogger(ProductDetailEditDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (jTabbedPane1.getSelectedIndex() == DEPARTMENT_TAB_INDEX) {
            String depId = editDepartmentId.getText();
            String depName = editDepartmentName.getText();

            GenericValue brandCategory = PosProductHelper.getProductCategory(depId, delegator);
            if (brandCategory == null) {
                try {
                    delegator.create(PosProductHelper.createProductCategory(depId, rootNode._id, "CATALOG_CATEGORY", depName, delegator));
                } catch (GenericEntityException ex) {
                    Logger.getLogger(ProductDetailEditDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            GenericValue rollUp = PosProductHelper.getProductCategoryRollup(depId, rootNode._id, delegator);
            if (rollUp == null) {
                try {
                    rollUp = PosProductHelper.createProductCategoryRollup(depId, rootNode._id, delegator);
                    delegator.create(rollUp);
                    Debug.logInfo("create [createProductCategoryRollup] " + rollUp, module);
                } catch (GenericEntityException ex) {
                    Logger.getLogger(ProductDetailEditDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            loadProductTree();

        }
        */
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAllocateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllocateActionPerformed
        /*clearProductDialogFields();
        comboPostalChanged(PRODUCT_TAB_INDEX);
        if (currTreeNode != null) {

            if (currTreeNode.getNodeName().equals(ProductTreeNode.ProdutNodeName)) {
                if (currTreeParentNode != null) {
                    comboBrand.getModel().setSelectedItem(currTreeParentNode._name);
                }
            } else if (currTreeNode.getNodeName().equals(BrandTreeNode.BrandNodeName)) {
                comboBrand.getModel().setSelectedItem(currTreeNode._name);
            }

            //    protected TreeNode currTreeNode = null;
            //    protected TreeNode currTreeParentNode = null;

        }*/
    }//GEN-LAST:event_btnAllocateActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
//        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    public JButton getBtnDelete() {
        return btnDelete;
    }

    public JButton getBtnAllocate() {
        return btnAllocate;
    }

    public JButton getBtnSave() {
        return btnSave;
    }

    public JButton getCancelButton() {
        return cancelButton;
    }

    public JButton getOkButton() {
        return okButton;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnAllocate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    public JButton getBtnAccept() {
        return btnAccept;
    }
}
