/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.product;

import java.awt.Component;
import java.awt.Rectangle;
import java.beans.PropertyChangeListener;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javolution.util.FastList;
import org.ofbiz.base.util.Debug;
import org.ofbiz.entity.Delegator;
import org.ofbiz.entity.GenericEntityException;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.guiapp.xui.XuiSession;
import org.ofbiz.ordermax.base.Key;
import org.ofbiz.ordermax.base.PosProductHelper;
import org.ofbiz.ordermax.base.TreeNode;
import org.ofbiz.ordermax.base.BaseMainPanelInterface;
import org.ofbiz.ordermax.generic.GenericValueObjectInterface;
import org.ofbiz.ordermax.generic.GenericValuePanelInterfaceOrderMax;
import org.ofbiz.ordermax.screens.InteractiveTableModel;
import org.ofbiz.ordermax.screens.KeyTableModel;
import org.ofbiz.ordermax.screens.ProductDetailEditDialog;

/**
 *
 * @author siranjeev
 */
public class DepartmentPanel extends javax.swing.JPanel implements BaseMainPanelInterface, GenericValuePanelInterfaceOrderMax {
    public static final String module = DepartmentPanel.class.getName();
    protected KeyTableModel tableModel = null;
    public static final String[] columnNames = {"Department Id", "Department Name", ""};
    private static int[] width = {200, 200, 2};
    protected Map<String, String> departmentValMap = new TreeMap<String, String>();
    protected List<String> departmentListBidingCombo = FastList.newInstance();
    protected boolean isModified = false;
    protected Delegator delegator = null; //XuiContainer.getSession().getDelegator();
    protected TreeNode rootNode = null;

    public TreeNode getRootNode() {
        return rootNode;
    }

    /**
     * Creates new form DepartmentPanel
     */
    public DepartmentPanel(TreeNode rNode, XuiSession session) {
        delegator = session.getDelegator();
        initComponents();        
        rootNode = rNode;
        editDepartmentId.getDocument().addDocumentListener(new TextChangeListner());
        editDepartmentName.getDocument().addDocumentListener(new TextChangeListner());
    }

    public void reloadItemDataModel(List<Key> cutdownList) {

        tableModel = new KeyTableModel(columnNames);
        tableModel.addTableModelListener(new InteractiveTableModelListener(tableDepartmentTable));
        tableDepartmentTable.setModel(tableModel);
        tableDepartmentTable.setSurrendersFocusOnKeystroke(true);
        //tableDepartmentTable.setPreferredScrollableViewportSize(new java.awt.Dimension(500, 300));        
        setColumnWidth(width);
        TableColumn hidden = tableDepartmentTable.getColumnModel().getColumn(KeyTableModel.HIDDEN_INDEX);
        hidden.setMinWidth(2);
        hidden.setPreferredWidth(2);
        hidden.setMaxWidth(2);
        hidden.setCellRenderer(new InteractiveRenderer(InteractiveTableModel.HIDDEN_INDEX, tableModel, tableDepartmentTable));
        tableDepartmentTable.setPreferredSize(new java.awt.Dimension(500, (cutdownList.size()) * tableDepartmentTable.getRowHeight()));
        tableModel.addRows(cutdownList);
        if (!tableModel.hasEmptyRow()) {
            tableModel.addEmptyRow();
        }
    }

    public void setDepartmentMap(Map depValMap) {
        departmentValMap = depValMap;
        DefaultComboBoxModel comboDepartmentModel = new DefaultComboBoxModel();
        for (Map.Entry<String, String> entryDept : departmentValMap.entrySet()) {

            comboDepartmentModel.addElement(entryDept.getValue());
            departmentListBidingCombo.add(entryDept.getKey());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tableDepartmentTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        editDepartmentId = new javax.swing.JTextField();
        editDepartmentName = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(500, 400));

        jScrollPane2.setMaximumSize(new java.awt.Dimension(760, 700));

        tableDepartmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableDepartmentTable);

        jLabel12.setText("Department Id:");

        jLabel13.setText("Department Name:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editDepartmentId, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editDepartmentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel13))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField editDepartmentId;
    private javax.swing.JTextField editDepartmentName;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableDepartmentTable;
    // End of variables declaration//GEN-END:variables

    public void clearDepartmentDialogFields() {
        editDepartmentId.setText("");
        editDepartmentName.setText("");
        isModified = false;
    }

    public void refreshScreen() {
//        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void addItem(String id) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void newItem() {
        clearDepartmentDialogFields();
        isModified = false;

    }

    public void saveItem() {

        String depId = editDepartmentId.getText();
        String depName = editDepartmentName.getText();

        GenericValue departmentCategory = PosProductHelper.getProductCategory(depId, delegator);
        if (departmentCategory == null) {
            try {
                delegator.create(PosProductHelper.createProductCategory(depId, rootNode._id, "CATALOG_CATEGORY", depName, null, null, null, delegator));
            } catch (GenericEntityException ex) {
                Logger.getLogger(ProductDetailEditDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                departmentCategory.set("categoryName", depName);
                delegator.store(departmentCategory);
            } catch (GenericEntityException ex) {
                Logger.getLogger(ProductDetailEditDialog.class.getName()).log(Level.SEVERE, null, ex);
            }            
        }

        GenericValue rollUp = PosProductHelper.getProductCategoryRollup(depId, rootNode._id, delegator);
        if (rollUp == null) {
            try {
                rollUp = PosProductHelper.createProductCategoryRollup(depId, rootNode._id, delegator);
                delegator.create(rollUp);
                Debug.logInfo("create [createProductCategoryRollup] " + rollUp, "module");
            } catch (GenericEntityException ex) {
                Logger.getLogger(ProductDetailEditDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        isModified = false;
    }

    public void loadItem() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setItem(Object val) {
//        throw new UnsupportedOperationException("Not supported yet.");
        try {
            TreeNode node = (TreeNode) val;
            String departmentId = node._id;
            GenericValue brandEntity = node.loadDetails(departmentId, delegator);

            editDepartmentId.setText(brandEntity.getString("productCategoryId"));
            editDepartmentName.setText(brandEntity.getString("categoryName"));
            int index = tableModel.getRowNumber(brandEntity.getString("productCategoryId"));
            if (index > 0) {
                tableDepartmentTable.setRowSelectionInterval(index, index);
                tableDepartmentTable.scrollRectToVisible(new Rectangle(tableDepartmentTable.getCellRect(index, 0, true)));
            }
            isModified = false;
//            comboDepartment.getModel().setSelectedItem(editDepartmentName.getText());
//            comboProductDepName.getModel().setSelectedItem(editDepartmentName.getText());

        } catch (GenericEntityException ex) {
            Logger.getLogger(ProductDetailEditDialog.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void changeUIObject(GenericValueObjectInterface uiObject) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public GenericValueObjectInterface createUIObject(GenericValue baseVal) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void getUIFields() throws java.text.ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setUIFields() throws  java.text.ParseException {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public JPanel getContainerPanel() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public GenericValueObjectInterface getUIObject() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public boolean isModified() {
        return isModified;
    }

    public void setIsModified(boolean isModified) {
        this.isModified = isModified;
    }

    public void setParentItem(Object val) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void addChangeListener(PropertyChangeListener newListener) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    class InteractiveRenderer extends DefaultTableCellRenderer {

        protected int interactiveColumn;
        protected KeyTableModel model = null;
        protected JTable jtable = null;

        public InteractiveRenderer(int interactiveColumn, KeyTableModel tabModel, JTable table) {
            this.interactiveColumn = interactiveColumn;
            model = tabModel;
            jtable = table;
        }

        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row,
                int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (column == interactiveColumn && hasFocus) {
                if ((model.getRowCount() - 1) == row
                        && !model.hasEmptyRow()) {
                    model.addEmptyRow();
                }

                this.highlightLastRowInner(row);
                //        rowChanged(row);
            }

            return c;
        }

        public void highlightLastRowInner(int row) {
            int lastrow = model.getRowCount();
            if (row == lastrow - 1) {
                jtable.setRowSelectionInterval(lastrow - 1, lastrow - 1);
            } else {
                jtable.setRowSelectionInterval(row + 1, row + 1);
            }

            jtable.setColumnSelectionInterval(0, 0);
        }
    }

    public class InteractiveTableModelListener implements TableModelListener {

        protected JTable jtable = null;

        public InteractiveTableModelListener(JTable table) {
            jtable = table;
        }

        public void tableChanged(TableModelEvent evt) {
            if (evt.getType() == TableModelEvent.UPDATE) {
                int column = evt.getColumn();
                int row = evt.getFirstRow();
                System.out.println("row: " + row + " column: " + column);
                jtable.setColumnSelectionInterval(column + 1, column + 1);
                jtable.setRowSelectionInterval(row, row);
            }
        }
    }

    public void setColumnWidth(int[] columnWidth) {
        TableColumn column = null;
        for (int i = 0; i < columnWidth.length; i++) {
            column = tableDepartmentTable.getColumnModel().getColumn(i);
//            if (i == 2) {
            column.setPreferredWidth(columnWidth[i]); //third column is bigger
//            } else {
//                column.setPreferredWidth(50);
//            }
        }
    }

    public void highlightLastRow(int row) {
        int lastrow = tableModel.getRowCount();
        if (row == lastrow - 1) {
            tableDepartmentTable.setRowSelectionInterval(lastrow - 1, lastrow - 1);
        } else {
            tableDepartmentTable.setRowSelectionInterval(row + 1, row + 1);
        }

        tableDepartmentTable.setColumnSelectionInterval(0, 0);
    }

    private class TextChangeListner implements DocumentListener {

        public void actionPerformed(java.awt.event.ActionEvent e) {
        }

        public void changedUpdate(DocumentEvent e) {

            warn(e);

        }

        public void removeUpdate(DocumentEvent e) {

            warn(e);

        }

        public void insertUpdate(DocumentEvent e) {

            warn(e);

        }

        void warn(DocumentEvent e) {

            isModified = true;

        }
    }
}
