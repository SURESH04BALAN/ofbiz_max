/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.product;

import java.awt.Cursor;
import java.awt.Image;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.ofbiz.ordermax.base.BaseHelper;
import org.ofbiz.ordermax.utility.GenericValueComboBox;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.ordermax.base.PosProductHelper;
import org.ofbiz.ordermax.generic.GenericValueMapComboBox;
import org.ofbiz.ordermax.screens.ProductDetailEditDialog;
import org.ofbiz.guiapp.xui.XuiSession;
import org.ofbiz.entity.GenericEntityException;

/**
 *
 * @author siranjeev
 */
public class CopyWebProductImagePanel extends javax.swing.JPanel {

    class prodctImageDate {

        boolean selected;
        String name;
        String path;
        ImageIcon image;
        ImageIcon imageSmal;
        String origName;
        String itemName;
        boolean product;
        boolean category;
        String brandName = "";
        String brandId = "";
    }
    protected XuiSession session = null;

    /**
     * Creates new form WebProductFrom
     */
    public CopyWebProductImagePanel(XuiSession session) {
        initComponents();
        this.session = session;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        imageLabelSave = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtPurchasePrice = new javax.swing.JTextField();
        btnUpdateBrand = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtSellingPrice = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        comboDepartmentName = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        comboBrand = new javax.swing.JComboBox();
        supplierCombo = new javax.swing.JComboBox();
        txtStringToRemove = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtStringToAdd = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        btnCopyProductNew = new javax.swing.JButton();
        btnCopyProductDetail = new javax.swing.JButton();
        btnCopyProductDetail1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnCreateNewCategory = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        btnUrl = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtFilePath = new javax.swing.JTextField();
        txtUrl = new javax.swing.JTextField();
        fileDirectory = new javax.swing.JTextField();
        txtParentCategory = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtNewCategoryId = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCategoryName = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setRowHeight(17);
        jScrollPane2.setViewportView(jTable1);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.WEST);

        jPanel4.setMaximumSize(new java.awt.Dimension(376, 327));
        jPanel4.setLayout(new java.awt.BorderLayout());

        imageLabel.setText("jLabel3");
        jPanel4.add(imageLabel, java.awt.BorderLayout.CENTER);

        imageLabelSave.setText("jLabel3");
        imageLabelSave.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        imageLabelSave.setMaximumSize(new java.awt.Dimension(34, 170));
        imageLabelSave.setPreferredSize(new java.awt.Dimension(34, 170));
        jPanel4.add(imageLabelSave, java.awt.BorderLayout.PAGE_START);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel6.setText("Selling Price:");

        btnUpdateBrand.setText("Update Brand");

        jLabel4.setText("Product Name:");

        jButton1.setText("rename file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Supplier Id:");

        jLabel8.setText("Brand Name:");

        jLabel5.setText("Purchase Price:");

        jLabel3.setText("Department Name:");

        comboBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBrandActionPerformed(evt);
            }
        });

        supplierCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtStringToRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStringToRemoveActionPerformed(evt);
            }
        });

        jLabel13.setText("String to remove:");

        jLabel14.setText("String to add:");

        txtStringToAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStringToAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPurchasePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUpdateBrand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1)
                    .addComponent(txtStringToRemove)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtStringToAdd))
                .addContainerGap())
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboBrand, comboDepartmentName, supplierCombo, txtProductName, txtPurchasePrice, txtSellingPrice});

        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboDepartmentName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUpdateBrand)))
                .addGap(9, 9, 9)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(12, 12, 12)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPurchasePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStringToRemove, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(12, 12, 12)
                        .addComponent(txtStringToAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel5.add(jPanel10, java.awt.BorderLayout.CENTER);

        btnCopyProductNew.setText("Copy As New Produc");
        btnCopyProductNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyProductNewActionPerformed(evt);
            }
        });

        btnCopyProductDetail.setText("Copy Product Deail");

        btnCopyProductDetail1.setText("Copy Product Image");
        btnCopyProductDetail1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyProductDetail1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCopyProductDetail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopyProductDetail1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCopyProductNew)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCopyProductDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCopyProductDetail1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCopyProductNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel5.add(jPanel7, java.awt.BorderLayout.PAGE_END);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.BorderLayout());

        btnSave.setText("Save Selected Web Category");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCreateNewCategory.setText("Create New Categor/Brand");
        btnCreateNewCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateNewCategoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCreateNewCategory)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreateNewCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel6.add(jPanel8, java.awt.BorderLayout.SOUTH);

        jButton2.setText("Create Dir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Web Id");

        jLabel2.setText("Save Image Location");

        jButton3.setText("Load Dir");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        btnUrl.setText("Load Url");
        btnUrl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUrlActionPerformed(evt);
            }
        });

        jLabel9.setText("Load from directory");

        txtFilePath.setText("C:\\Images\\hairoil");

        txtUrl.setText("http://www.sabifood.com/product_lentils.html");

        jLabel10.setText("Parent Category Id");

        jLabel11.setText("New Category Id");

        jLabel12.setText("New Category Name");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)))
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(17, 17, 17)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtParentCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNewCategoryId, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFilePath)
                    .addComponent(fileDirectory)
                    .addComponent(txtUrl, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnUrl)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jPanel9Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnUrl, jButton2, jButton3});

        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fileDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(btnUrl)
                        .addGap(12, 12, 12)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtParentCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNewCategoryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addContainerGap())
        );

        jPanel6.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel6);

        jTabbedPane1.addTab("tab2", jPanel1);

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 905, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(96, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("tab1", jPanel3);

        add(jTabbedPane1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents
    static int i = 0;
    ArrayList<prodctImageDate> list = new ArrayList<prodctImageDate>();
    private void btnUrlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUrlActionPerformed
        //get clear the image store
        BaseHelper.clearImageStore();

        list = new ArrayList<prodctImageDate>();
        try {
            String url1 = txtUrl.getText();//"http://www.desimart.com/Beverages/Nutrition";
            //"http://shanfoodspk.com/consumer/2011/09/25/bombay-biryani/";
            //"http://shop.indiabazaar.com.au/epages/shop.sf/en_AU/?ObjectPath=/Shops/IndiaBazaar/Categories/Indian_Spices/Page__Category";//http://www.southpacificfoods.com.au/Products.aspx";//args[0];

            print("Fetching %s...", url1);
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            Document doc = Jsoup.connect(url1).get();
            Elements links = doc.select("a[href]");
            Elements media = doc.select("[src]");
            Elements imports = doc.select("link[href]");
            txtArea.setText("");
            print("\nMedia: (%d)", media.size());
            for (Element src : media) {
                if (src.tagName().equals("img") && src.attr("alt") != null) {
                    print(" * %s: <%s> %sx%s (%s)",
                            src.tagName(), src.attr("abs:src"), src.attr("width"), src.attr("height"),
                            trim(src.attr("alt"), 20));
                    try {
                        //String fileName = src.attr("alt");
//                        String[] myList = src.attr("abs:src");
                        //if (fileName.isEmpty()) {
//                            fileName = myList[myList.length-1];//String.valueOf(i++);
                        File dir = new File(src.attr("abs:src"));
                        String fileName = dir.getName();
                        //}



//                        String desc = /*"c:\\images\\spf\\"*/ "C:\\Images\\spf\\ironman\\" + fileName + ".jpg";
                        String desc = txtFilePath.getText() + "\\" + fileName;// + ".jpg";;
                        prodctImageDate image = new prodctImageDate();
                        image.name = fileName;
                        image.path = desc;
                        image.origName = src.attr("abs:src");
                        image.itemName = src.attr("alt");
                        int brandPos = image.itemName.indexOf("-");
                        if (brandPos > 0) {
                            image.product = true;

                            String brandName = image.itemName.substring(brandPos + 1).trim();
                            brandPos = brandName.indexOf("-");
                            if (brandPos > 0) {
                                brandName = brandName.substring(0, brandPos).trim();
                            }
                            image.brandName = brandName;
                        }

                        print("desc: " + src.attr("alt"));
                        print("url: " + src.attr("abs:src"));
                        URL url = new URL(src.attr("abs:src"));
                        InputStream in = new BufferedInputStream(url.openStream());
                        ByteArrayOutputStream out = new ByteArrayOutputStream();
                        byte[] buf = new byte[1024];
                        int n = 0;
                        while (-1 != (n = in.read(buf))) {
                            out.write(buf, 0, n);
                        }
                        out.close();
                        in.close();
                        byte[] response = out.toByteArray();


                        image.image = new ImageIcon(response);
                        if (image.image != null) {
                            Image img = image.image.getImage();
                            image.imageSmal = new ImageIcon(img.getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
                            FileOutputStream fos = new FileOutputStream(desc);
                            fos.write(response);
                            fos.close();
                            list.add(image);
                        }
                    } catch (Exception e) {
                        print(e.toString());
                    }

                } else {
                    print(" * %s: <%s>", src.tagName(), src.attr("abs:src"));
                }
            }
            this.setCursor(Cursor.getDefaultCursor());
            /*            print("\nImports: (%d)", imports.size());
             for (Element link : imports) {
             print(" * %s <%s> (%s)", link.tagName(), link.attr("abs:href"), link.attr("rel"));
             }

             print("\nLinks: (%d)", links.size());
             for (Element link : links) {
             print(" * a: <%s>  (%s)", link.attr("abs:href"), trim(link.text(), 35));
             }
             * */
        } catch (IOException ex) {
            this.setCursor(Cursor.getDefaultCursor());
            Logger.getLogger(CopyWebProductImagePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        MyTableModel myModel = new MyTableModel(list);
        jTable1.setModel(myModel);
        ListSelectionModel listSelectionModel = jTable1.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandler());
        jTable1.setSelectionModel(listSelectionModel);

    }//GEN-LAST:event_btnUrlActionPerformed
    static String temp = "";

    public void listFilesForFolder(final File folder, ArrayList<prodctImageDate> list) {

        for (final File fileEntry : folder.listFiles()) {
            if (fileEntry.isDirectory()) {
                // System.out.println("Reading files under the folder "+folder.getAbsolutePath());
                listFilesForFolder(fileEntry, list);
            } else {
                if (fileEntry.isFile()) {
                    InputStream in = null;
                    //                  try {
                    temp = fileEntry.getName();
                    //          if ((temp.substring(temp.lastIndexOf('.') + 1, temp.length()).toLowerCase()).equals("txt"))
                    System.out.println("File= " + folder.getAbsolutePath() + "/" + fileEntry.getName());
                    System.out.println("File NAME= " + fileEntry.getName());
                    prodctImageDate image = new prodctImageDate();
                    image.itemName = fileEntry.getName();
                    image.path = folder.getAbsolutePath() + "/" + fileEntry.getName();
                    image.origName = folder.getAbsolutePath() + "/" + fileEntry.getName();
                    /*                      URL url = new URL(image.path);
                     in = new BufferedInputStream(fileEntry.openStream());
                     ByteArrayOutputStream out = new ByteArrayOutputStream();
                     byte[] buf = new byte[1024];
                     int n = 0;
                     while (-1 != (n = in.read(buf))) {
                     out.write(buf, 0, n);
                     }
                     out.close();
                     in.close();
                     byte[] response = out.toByteArray();

                     */
                    image.image = new ImageIcon(image.path);
                    if (image.image != null) {
                        Image img = image.image.getImage();
                        image.imageSmal = new ImageIcon(img.getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
//                            FileOutputStream fos = new FileOutputStream(image.itemName);
//                            fos.write(response);
//                            fos.close();
                        list.add(image);
                    }

                    list.add(image);
                    //                 } catch (IOException ex) {
                    //                     Logger.getLogger(CopyWebProductImagePanel.class.getName()).log(Level.SEVERE, null, ex);                    
                    //                 } finally {
                    //                     try {
                    //                         in.close();
                    //                     } catch (IOException ex) {
                    //                         Logger.getLogger(CopyWebProductImagePanel.class.getName()).log(Level.SEVERE, null, ex);
//                        }
                }
            }
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        File dir = new File(txtFilePath.getText());
        dir.mkdirs();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnCopyProductDetail1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyProductDetail1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCopyProductDetail1ActionPerformed

    private void btnCopyProductNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyProductNewActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCopyProductNewActionPerformed

    private void comboBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBrandActionPerformed
    }//GEN-LAST:event_comboBrandActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ArrayList<prodctImageDate> list = new ArrayList<prodctImageDate>();
        File folder = new File(fileDirectory.getText());
        listFilesForFolder(folder, list);
        MyTableModel myModel = new MyTableModel(list);
        jTable1.setModel(myModel);
        ListSelectionModel listSelectionModel = jTable1.getSelectionModel();
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandler());
        jTable1.setSelectionModel(listSelectionModel);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /*        selectedProductName = jTable1.getModel().getValueAt(i, 0).toString();
         selectedProductImagePath = jTable1.getModel().getValueAt(i, 1).toString();

         File oldfile = new File(fileDirectory.getText() + "/" + selectedProductName);
         int spacePos = oldfile.getName().indexOf(".");
         String newFileName = fileDirectory.getText() + "/" + txtProductName.getText() + oldfile.getName().substring(spacePos);

         File newfile = new File(newFileName);
         System.out.println("old file " + oldfile.getName());
         System.out.println("new file " + newfile.getName());
         if (oldfile.renameTo(newfile)) {
         System.out.println("Rename succesful");
         } else {
         System.out.println("Rename failed");
         }
         */

        for (int i = 0; i < jTable1.getModel().getRowCount(); ++i) {
            jTable1.setRowSelectionInterval(i, i);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
//        ArrayList<prodctImageDate> list = new ArrayList<prodctImageDate>();

        for (prodctImageDate categoryData : list) {
            if (categoryData.selected && categoryData.category) {
                saveCategory(categoryData, txtParentCategory.getText());
            }
        }


    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCreateNewCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateNewCategoryActionPerformed
        // TODO add your handling code here:
        prodctImageDate categoryData = new prodctImageDate();
        categoryData.brandName = txtCategoryName.getText();
        categoryData.brandId = txtNewCategoryId.getText();
        saveNewCategory(categoryData, txtParentCategory.getText());
    }//GEN-LAST:event_btnCreateNewCategoryActionPerformed

    private void txtStringToRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStringToRemoveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStringToRemoveActionPerformed

    private void txtStringToAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStringToAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStringToAddActionPerformed

    public JButton getBtnCopyProductNew() {
        return btnCopyProductNew;
    }

    private void print(String msg, Object... args) {
//        System.out.println(
        txtArea.append(String.format(msg, args) + "\n");
    }

    private static String trim(String s, int width) {
        if (s.length() > width) {
            return s.substring(0, width - 1) + ".";
        } else {
            return s;


        }
    }

    class MyTableModel extends AbstractTableModel {

        private String[] columnNames = {"sel", "cat", "prod", "Product Name",
            "Image Path", "Image", "Orig Name", "Brand"};
        ArrayList<prodctImageDate> list = new ArrayList<prodctImageDate>();
        private Object[][] data = {
            {new Boolean("0"), new Boolean("0"), new Boolean("0"), "Product Name", "Image Path",
                new ImageIcon(), "Image Path", "Brand"},};

        MyTableModel(ArrayList<prodctImageDate> list) {
            this.list.addAll(list);
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            return list.size();
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            if (col == 0) {
                return list.get(row).selected;
            } else if (col == 1) {
                return list.get(row).category;
            } else if (col == 2) {
                return list.get(row).product;
            } else if (col == 3) {
                return list.get(row).itemName;
            } else if (col == 4) {
                return list.get(row).path;
            } else if (col == 5) {
                return list.get(row).imageSmal;
            } else if (col == 6) {
                return list.get(row).origName;
            } else if (col == 7) {
                return list.get(row).brandName;
            }

            return "";
        }

        /*
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         */
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }

        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            return true;

        }

        public void setValueAt(Object value, int row, int col) {
            if (col == 0) {
                list.get(row).selected = ((Boolean) value).booleanValue();
            } else if (col == 1) {
                list.get(row).category = ((Boolean) value).booleanValue();
            } else if (col == 2) {
                list.get(row).product = ((Boolean) value).booleanValue();
            } else if (col == 3) {
                list.get(row).itemName = (String) value;
            } else if (col == 4) {
                list.get(row).path = (String) value;
            } else if (col == 7) {
                list.get(row).brandName = (String) value;;
            }


            fireTableCellUpdated(row, col);
        }
    }
    public String selectedProductName = "";
    public String selectedProductImagePath = "";

    class SharedListSelectionHandler implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent e) {
            ListSelectionModel lsm = (ListSelectionModel) e.getSource();

            int firstIndex = e.getFirstIndex();
            int lastIndex = e.getLastIndex();
            boolean isAdjusting = e.getValueIsAdjusting();

            if (lsm.isSelectionEmpty()) {
                print(" <none>");
            } else {
                // Find out which indexes are selected.
                int minIndex = lsm.getMinSelectionIndex();
                int maxIndex = lsm.getMaxSelectionIndex();
                for (int i = minIndex; i <= maxIndex; i++) {
                    if (lsm.isSelectedIndex(i)) {
/*                        selectedProductName = jTable1.getModel().getValueAt(i, 3).toString();
                        selectedProductImagePath = jTable1.getModel().getValueAt(i, 4).toString();
                        txtCategoryName.setText(jTable1.getModel().getValueAt(i, 7).toString());
                        txtProductName.setText(selectedProductName);

                        imageLabel.setIcon(BaseHelper.getImage(selectedProductImagePath));
                        print(jTable1.getModel().getValueAt(i, 3).toString() + " " + i);
                        */
                        getRowData(i);
                    }
                }
            }
//            print(newline);
//            output.setCaretPosition(output.getDocument().getLength());
        }
    }

    public void getRowData(int i) {
        selectedProductName = jTable1.getModel().getValueAt(i, 3).toString();
        selectedProductImagePath = jTable1.getModel().getValueAt(i, 4).toString();
        txtCategoryName.setText(jTable1.getModel().getValueAt(i, 7).toString());
        txtProductName.setText(selectedProductName);

        imageLabel.setIcon(/*new ImageIcon(OrderMaxUtility.getImage(field.getText()))*/BaseHelper.getImage(selectedProductImagePath));
        print(jTable1.getModel().getValueAt(i, 3).toString() + " " + i);

    }

    public void saveNewCategory(prodctImageDate categoryData, String parentCatId) {
        try {

            if (parentCatId != null && categoryData.brandName.isEmpty() == false) {

                String depId = parentCatId;
                String brandName = categoryData.brandName;

                String brandId = categoryData.brandId;

                if (brandId != null && brandId.length() > 20) {
                    brandId = brandId.substring(0, 19);
                }


                String categoryImageUrl = null;
                String linkOneImageUrl = null;
                String linkTwoImageUrl = null;

                if (categoryData.path != null && categoryData.path.isEmpty() == false) {
                    File filePath = new File(categoryData.path);//BaseHelper.getImageFilePath("original");

                    categoryImageUrl = BaseHelper.CopyCategoryImageSetFileName("category", filePath, brandId, 0, 0);
                    linkOneImageUrl = BaseHelper.CopyCategoryImageSetFileName("linkOne", filePath, brandId, 60, 60);
                    linkTwoImageUrl = BaseHelper.CopyCategoryImageSetFileName("linkTwo", filePath, brandId, 48, 48);
                }

                //editBrandId.setText(brandId);
                GenericValue brandCategory = PosProductHelper.getProductCategory(brandId, session.getDelegator());
                if (brandCategory == null) {
                    session.getDelegator().create(PosProductHelper.createProductCategory(brandId, depId, "CATALOG_CATEGORY", brandName,
                            categoryImageUrl,
                            linkOneImageUrl,
                            linkTwoImageUrl,
                            session.getDelegator()));

                    GenericValue rollUp = PosProductHelper.getProductCategoryRollup(brandId, depId, session.getDelegator());
                    if (rollUp == null) {
                        rollUp = PosProductHelper.createProductCategoryRollup(brandId, depId, session.getDelegator());
                        session.getDelegator().create(rollUp);
                        //Debug.logInfo("create [createProductCategoryRollup] " + rollUp, module);
                    }
                } else {
                    try {
                        brandCategory = PosProductHelper.getProductCategory(brandId, session.getDelegator());
                        if (brandCategory != null) {

                            brandCategory.set("categoryName", categoryData.brandName);
                            brandCategory.set("categoryImageUrl", categoryImageUrl);
                            brandCategory.set("linkOneImageUrl", linkOneImageUrl);
                            brandCategory.set("linkTwoImageUrl", linkTwoImageUrl);
                            session.getDelegator().store(brandCategory);

                            GenericValue rollUp = PosProductHelper.getProductCategoryRollup(brandId, depId, session.getDelegator());
                            if (rollUp == null) {
                                rollUp = PosProductHelper.createProductCategoryRollup(brandId, depId, session.getDelegator());
                                session.getDelegator().create(rollUp);
                                //Debug.logInfo("create [createProductCategoryRollup] " + rollUp, module);
                            }

                        }

                    } catch (GenericEntityException ex) {
                        Logger.getLogger(ProductDetailEditDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } catch (GenericEntityException ex) {
            Logger.getLogger(CopyWebProductImagePanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void saveCategory(prodctImageDate categoryData, String parentCatId) {
        try {

            if (parentCatId != null && categoryData.itemName.isEmpty() == false) {

                String depId = parentCatId;
                String brandName = categoryData.itemName;

                String brandId = "";
                String brandNameStr = brandName.replaceAll("\\s", "");
                brandNameStr = brandNameStr.replaceAll("&", "");

                if (depId.length() > 4) {
                    brandId = depId.substring(0, 4) + "_" + brandNameStr;
                } else {
                    brandId = depId + "_" + brandNameStr;
                }

                if (brandId != null && brandId.length() > 20) {
                    brandId = brandId.substring(0, 19);
                }


                File filePath = new File(categoryData.path);//BaseHelper.getImageFilePath("original");

                String categoryImageUrl = BaseHelper.CopyCategoryImageSetFileName("category", filePath, brandId, 0, 0);
                String linkOneImageUrl = BaseHelper.CopyCategoryImageSetFileName("linkOne", filePath, brandId, 60, 60);
                String linkTwoImageUrl = BaseHelper.CopyCategoryImageSetFileName("linkTwo", filePath, brandId, 48, 48);

                //editBrandId.setText(brandId);
                GenericValue brandCategory = PosProductHelper.getProductCategory(brandId, session.getDelegator());
                if (brandCategory == null) {
                    session.getDelegator().create(PosProductHelper.createProductCategory(brandId, depId, "CATALOG_CATEGORY", brandName,
                            categoryImageUrl,
                            linkOneImageUrl,
                            linkTwoImageUrl,
                            session.getDelegator()));

                    GenericValue rollUp = PosProductHelper.getProductCategoryRollup(brandId, depId, session.getDelegator());
                    if (rollUp == null) {
                        rollUp = PosProductHelper.createProductCategoryRollup(brandId, depId, session.getDelegator());
                        session.getDelegator().create(rollUp);
                        //Debug.logInfo("create [createProductCategoryRollup] " + rollUp, module);
                    }
                } else {
                    try {
                        brandCategory = PosProductHelper.getProductCategory(brandId, session.getDelegator());
                        if (brandCategory != null) {

                            brandCategory.set("categoryName", categoryData.itemName);
                            brandCategory.set("categoryImageUrl", categoryImageUrl);
                            brandCategory.set("linkOneImageUrl", linkOneImageUrl);
                            brandCategory.set("linkTwoImageUrl", linkTwoImageUrl);
                            session.getDelegator().store(brandCategory);

                            GenericValue rollUp = PosProductHelper.getProductCategoryRollup(brandId, depId, session.getDelegator());
                            if (rollUp == null) {
                                rollUp = PosProductHelper.createProductCategoryRollup(brandId, depId, session.getDelegator());
                                session.getDelegator().create(rollUp);
                                //Debug.logInfo("create [createProductCategoryRollup] " + rollUp, module);
                            }

                        }

                    } catch (GenericEntityException ex) {
                        Logger.getLogger(ProductDetailEditDialog.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        } catch (GenericEntityException ex) {
            Logger.getLogger(CopyWebProductImagePanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }

    }

    public JButton getBtnCopyProductDetail() {
        return btnCopyProductDetail;
    }

    public JButton getBtnCopyProductDetail1() {
        return btnCopyProductDetail1;
    }
    protected GenericValueComboBox supplierPartyIdCombo = null;

    public void setSupplierList(List<GenericValue> genSupplierList) {

        supplierPartyIdCombo = new GenericValueComboBox(supplierCombo, genSupplierList, "Party", "partyId", "description");

    }
    GenericValueMapComboBox genericValueMapBrandComboBox = null;

    public void setBrandList(Map<String, String> brandMap) {
        genericValueMapBrandComboBox = new GenericValueMapComboBox(comboBrand, brandMap);
        genericValueMapBrandComboBox.loadCombo();

    }
    GenericValueMapComboBox genericValueMapComboBox = null;

    public void setDepartmentMap(Map depValMap) {
        genericValueMapComboBox = new GenericValueMapComboBox(comboDepartmentName, depValMap);
        genericValueMapComboBox.loadCombo();
    }

    public String getSupplierId() {
        return supplierPartyIdCombo.getSelectedItemId();//.get(comboDepartmentName.getSelectedIndex());
    }

    public String getBrandId() {
        return genericValueMapBrandComboBox.getSelectedItemId();//.get(comboDepartmentName.getSelectedIndex());
    }

    public String getDepartmentId() {
        return genericValueMapComboBox.getSelectedItemId();//.get(comboDepartmentName.getSelectedIndex());
    }

    public void setBrandId(String id) {
        genericValueMapBrandComboBox.setSelectedItemId(id);
    }

    public void setDepartmentId(String id) {
        genericValueMapComboBox.setSelectedItemId(id);//.get(comboDepartmentName.getSelectedIndex());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopyProductDetail;
    private javax.swing.JButton btnCopyProductDetail1;
    private javax.swing.JButton btnCopyProductNew;
    private javax.swing.JButton btnCreateNewCategory;
    private javax.swing.JButton btnSave;
    public javax.swing.JButton btnUpdateBrand;
    private javax.swing.JButton btnUrl;
    private javax.swing.JComboBox comboBrand;
    private javax.swing.JComboBox comboDepartmentName;
    private javax.swing.JTextField fileDirectory;
    private javax.swing.JLabel imageLabel;
    public javax.swing.JLabel imageLabelSave;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTable jTable1;
    private javax.swing.JComboBox supplierCombo;
    private javax.swing.JTextArea txtArea;
    public javax.swing.JTextField txtCategoryName;
    private javax.swing.JTextField txtFilePath;
    public javax.swing.JTextField txtNewCategoryId;
    public javax.swing.JTextField txtParentCategory;
    public javax.swing.JTextField txtProductName;
    public javax.swing.JTextField txtPurchasePrice;
    public javax.swing.JTextField txtSellingPrice;
    public javax.swing.JTextField txtStringToAdd;
    public javax.swing.JTextField txtStringToRemove;
    private javax.swing.JTextField txtUrl;
    // End of variables declaration//GEN-END:variables
}
