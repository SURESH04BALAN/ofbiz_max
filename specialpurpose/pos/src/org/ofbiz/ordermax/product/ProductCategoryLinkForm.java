/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.ordermax.product;

import java.beans.PropertyChangeListener;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.ofbiz.ordermax.generic.GenericValueObjectInterface;
import org.ofbiz.ordermax.utility.OrderMaxUtility;
import org.ofbiz.ordermax.generic.GenericValuePanelInterfaceOrderMax;
import org.ofbiz.ordermax.utility.ComponentBorder;
import org.ofbiz.ordermax.utility.LookupActionListner;
import org.ofbiz.ordermax.utility.OrderMaxUtility;
import org.ofbiz.base.util.Debug;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.guiapp.xui.XuiSession;
import org.ofbiz.ordermax.generic.GenericValueObjectInterface;
import org.ofbiz.entity.GenericEntityException;
import org.ofbiz.ordermax.base.PosProductHelper;
import org.ofbiz.base.util.UtilMisc;

/**
 *
 * @author siranjeev
 */
public class ProductCategoryLinkForm extends ProductCategoryMemberPanel implements org.ofbiz.ordermax.base.BaseMainPanelInterface {

    protected XuiSession session = null;

    /**
     * Creates new form ProductCategoryLinkForm
     */
    public ProductCategoryLinkForm(XuiSession session) {

        this.session = session;
        initComponents();
        super.initComponent();
//        this.add(currPanel);

        OrderMaxUtility.addAPanelGrid(currPanel, jPanel1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 300));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 927, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel3.setPreferredSize(new java.awt.Dimension(100, 100));

        jLabel1.setText("Source Category");

        jTextField1.setText("jTextField1");

        jLabel2.setText("Destination Category");

        jTextField2.setText("jTextField2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(jTextField2))
                .addContainerGap(610, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        add(jPanel3, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void refreshScreen() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void addItem(String id) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void newItem() {
        try {
            //TelecomNumber telNumber = new TelecomNumber();
            GenericValueObjectInterface uiObject = this.createUIObject(null);
            changeUIObject(uiObject);
            setUIFields();
        } catch (java.text.ParseException ex) {
        }

    }

    @Override
    public void saveItem() throws Exception {
        boolean newValue = true;
        GenericValueObjectInterface prodCat = getUIObject();
        GenericValue detailValue = prodCat.getGenericValueObj();
        if (prodCat.isGenericValueSet() == false) {
            Debug.logInfo("saveItem new 1", module);
            detailValue = prodCat.createNewGenericValueObj(session.getDelegator());
            newValue = true;
        }
        getUIFields();
        prodCat.getGenericValue();
        Debug.logInfo("saveItem Save 1", module);
        try {
//            GenericValue prodCat = delegator.findByPrimaryKey("ProdCatalog", UtilMisc.toMap("prodCatalogId", prodCatalogId));
//            if (prodCat == null) {
//                prodCat = createNewGenericValueObj(delegator);
//            }
            //store person
            if(parentItem!=null){
                String productCategoryId = parentItem.getString("productCategoryId");
                String productId = parentItem.getString("productId");                
                if(productId.equals(productIdTextField.getText()) && productCategoryId.equals(productCategoryIdTextField.getText())){
                    newValue = false;
                }
                else{
                    deleteItem(parentItem);
                }
            }
            
            if (newValue) {
                session.getDelegator().create(prodCat.getGenericValueObj());
            } else {
                session.getDelegator().store(prodCat.getGenericValueObj());
            }
        } catch (GenericEntityException e) {
            // TODO Auto-generated catch block
//            Debug.logError(e, module);
            e.printStackTrace();
//            result = false;
        }
//        prodCat.createOrStoreGenericValue(session.getDelegator());
        Debug.logInfo("Save 3", module);

    }

    @Override
    public void loadItem() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setItem(Object val) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    GenericValue parentItem = null;

    @Override
    public void setParentItem(Object val) {
        parentItem = (GenericValue) val;
    }

    @Override
    public void addChangeListener(PropertyChangeListener newListener) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void deleteItem() {

        String prodId = productIdTextField.getText();
        GenericValue prodValue = PosProductHelper.getGenericValueByKey("Product", UtilMisc.toMap("productId", prodId), session.getDelegator());

        List<GenericValue> valList = PosProductHelper.getGenericValueLists("ProductCategoryMember", "productId", prodId, session.getDelegator());
        for (GenericValue val : valList) {
            // session.getDelegator().removeValue(val, true);
            deleteItem(val);
        }


    }

    public void deleteItem(GenericValue item) {
        try {
            session.getDelegator().removeValue(item, true);

        } catch (GenericEntityException ex) {
            Logger.getLogger(ProductCategoryLinkForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }
}
