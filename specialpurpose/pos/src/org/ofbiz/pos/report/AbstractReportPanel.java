/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.ofbiz.pos.report;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;
import javolution.util.FastList;
import javolution.util.FastMap;
import org.ofbiz.accounting.invoice.InvoiceWorker;
import org.ofbiz.base.util.Debug;
import org.ofbiz.base.util.UtilDateTime;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.Delegator;
import org.ofbiz.entity.GenericEntityException;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.entity.condition.EntityCondition;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.entity.transaction.GenericTransactionException;
import org.ofbiz.entity.transaction.TransactionUtil;
import org.ofbiz.entity.util.EntityFindOptions;
import org.ofbiz.entity.util.EntityListIterator;
import org.ofbiz.guiapp.xui.XuiContainer;
import org.ofbiz.guiapp.xui.XuiSession;
import org.ofbiz.order.order.OrderReadHelper;
import org.ofbiz.ordermax.base.ControllerOptions;
import org.ofbiz.ordermax.base.OrderMaxOptionPane;
import org.ofbiz.ordermax.report.OrderMaxJRViewer;
import static org.ofbiz.ordermax.report.ReportBaseMain.AddDateSelection;
import static org.ofbiz.ordermax.report.ReportBaseMain.addToGridLayout;
import org.ofbiz.ordermax.report.ReportInterface;
import org.ofbiz.ordermax.report.ReportParameterSelectionInterface;
import org.ofbiz.ordermax.report.ReportParameterSelectionPanel;
import org.ofbiz.pos.PosTransaction;
import org.ofbiz.pos.generic.*;

/**
 *
 * @author siranjeev
 */
public abstract class AbstractReportPanel extends javax.swing.JPanel implements ReportInterface {


    public static final String module1 = AbstractReportPanel.class.getName();
    public List<ReportParameterSelectionInterface> filterList = new ArrayList<ReportParameterSelectionInterface>();

    /**
     * Creates new form EndOfTheDayReportPanel
     */
    public AbstractReportPanel() {
        initComponents();
    }

    abstract public String getName();

    XuiSession session = XuiContainer.getSession();

 
    @Override
    abstract public javax.swing.JPanel runReport();

    
    protected List<Map<String, Object>> dataArray = new ArrayList<Map<String, Object>>();

    public void addRowToTable(String groupName, String fieldName, String totalvalue, String itemPaidValue, String itemBalanceValue) {
        Map<String, Object> line = new HashMap<String, Object>();

        line.put("fieldGroup", groupName);
        line.put("itemName", fieldName);
        line.put("itemTotalValue", totalvalue);
        line.put("itemPaidValue", itemPaidValue);
        line.put("itemBalanceValue", itemBalanceValue);

        dataArray.add(line);

    }

    void appendEmpty() {
        addRowToTable("", "", "", "", "");
    }

    public void printReport(PosTransaction m_trans) {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(1, 0));
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public String identifier() {
        return getName();
    }



    @Override
    abstract public JPanel getSelectionPanel(); 

    @Override
    public boolean getShowSelectionPanel() {
        return true;
    }

    @Override
    public void setShowSelectionPanel(boolean val) {

    }

    @Override
    public Map<String, Object> getWhereClause() {
        Map<String, Object> whereClause = FastMap.newInstance();
        return whereClause;
    }

    static public List<EntityCondition> getWhereClauseCond(List<ReportParameterSelectionInterface> filterList) {
        List<EntityCondition> whereClauseMap = new ArrayList<EntityCondition>();
        for (ReportParameterSelectionInterface genPanel : filterList) {
            EntityCondition cond = genPanel.getEntityCondition();
            if (cond != null) {
                Debug.logInfo("cond : " + cond.toString(), module1);
                whereClauseMap.add(cond);
            }
        }
        return whereClauseMap;
    }

    public List<EntityCondition> getWhereClauseCond() {
        return getWhereClauseCond(filterList);
    }

    @Override
    public OrderMaxJRViewer getJRViewer() {
        return null;
    }

    @Override
    public Collection getBeanCollection(Map<String, Object> collectionMap) throws Exception {
        return null;
    }

}
