/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.reports.common;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import org.ofbiz.ordermax.base.ContainerPanelInterface;

/**
 *
 * @author siranjeev
 */
public class TwoPanelReportInternalFrame extends javax.swing.JInternalFrame implements ContainerPanelInterface {

    private PosReportPanel posReportPanel = null;

    public TwoPanelReportInternalFrame(final String ownerName) {
        initComponents();
        this.ownerName = ownerName;

        setMaximizable(true);
        setIconifiable(true);
        setClosable(true);
        setResizable(true);

        posReportPanel = new PosReportPanel();
        this.add(posReportPanel, BorderLayout.CENTER);
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(ContainerPanelInterface.ReturnStausType.RET_CANCEL);
            }
        });

    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setNormalBounds(new java.awt.Rectangle(0, 0, 0, 0));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
//        this.dispose();
    }//GEN-LAST:event_formInternalFrameClosed
    @Override
    public JPanel getPanelDetail() {
        return posReportPanel.m_jPanelContainer;
    }
  @Override
    public JPanel getPanelSelecton() {
        return null;
    }

    @Override
    public JPanel getPanelButton() {
        return null;
    }
    
    public JTextField textField = null;

    @Override
    public void setVisible(boolean value) {
        super.setVisible(value);
        if (textField != null) {
            textField.requestFocusInWindow();
        }
    }


    private ReturnStausType returnStatus = ReturnStausType.RET_CANCEL;

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public ReturnStausType getReturnStatus() {
        return returnStatus;
    }

    private void doClose(ReturnStausType retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    public void okButtonPressed() {
        doClose(ReturnStausType.RET_OK);
    }

    public void cancelButtonPressed() {
        doClose(ReturnStausType.RET_CANCEL);
    }

    @Override
    public void addActionListener(ActionListener listener) {
        listeners.add(listener);
    }

    @Override
    public void removeActionListener(ActionListener listener) {
        listeners.remove(listener);
    }
    /*
     @Override
     public void setVisible(final boolean visible) {
     // make sure that frame is marked as not disposed if it is asked to be visible
     //        if (visible) {
     //            setDisposed(false);
     //        }
     // let's handle visibility...
     if (!visible || !isVisible()) { // have to check this condition simply because super.setVisible(true) invokes toFront if frame was already visible
     super.setVisible(visible);
     }
     // ...and bring frame to the front.. in a strange and weird way
     if (visible) {
     int state = super.getExtendedState();
     state &= ~JFrame.ICONIFIED;
     super.setExtendedState(state);
     super.setAlwaysOnTop(true);
     super.toFront();
     super.requestFocus();
     super.setAlwaysOnTop(false);
     }
     if (textField != null) {
     textField.requestFocusInWindow();
     }
     }

     @Override
     public void toFront() {
     super.setVisible(true);
     int state = super.getExtendedState();
     state &= ~JFrame.ICONIFIED;
     super.setExtendedState(state);
     super.setAlwaysOnTop(true);
     super.toFront();
     super.requestFocus();
     super.setAlwaysOnTop(false);
     }
     */
    protected String ownerName = null;

    public String getOwnerName() {
        return ownerName;
    }

    public void setCaption(String title) {
        setTitle(title);
    }

    @Override
    public ContainerType getContainerType() {
        return ContainerType.TwoPanelInternalContainer;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


    @Override
    public void setDividerLocation(int value) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JPanel getPanelParent() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
 public PosReportPanel getPosReportPanel() {
        return posReportPanel;
    }

    public void setPosReportPanel(PosReportPanel posReportPanel) {
        this.posReportPanel = posReportPanel;
    }    
}
