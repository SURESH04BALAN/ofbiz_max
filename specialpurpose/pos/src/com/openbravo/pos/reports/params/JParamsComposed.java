//    Openbravo POS is a point of sales application designed for touch screens.
//    Copyright (C) 2007-2009 Openbravo, S.L.
//    http://www.openbravo.com/product/pos
//
//    This file is part of Openbravo POS.
//
//    Openbravo POS is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    Openbravo POS is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with Openbravo POS.  If not, see <http://www.gnu.org/licenses/>.
package com.openbravo.pos.reports.params;

import com.openbravo.basic.BasicException;
import com.openbravo.data.loader.SerializerWrite;
import com.openbravo.data.loader.SerializerWriteComposed;
import com.openbravo.pos.forms.AppView;
import com.openbravo.pos.reports.ReportEditorCreator;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.ofbiz.base.util.Debug;
import org.ofbiz.entity.condition.EntityCondition;

public class JParamsComposed extends javax.swing.JPanel implements ReportEditorCreator {

    public static final String module = JParamsComposed.class.getName();
    private List<ReportEditorCreator> editors = new ArrayList<ReportEditorCreator>();

    /**
     * Creates new form JParamsComposed
     */
    public JParamsComposed() {
        initComponents();
//        this.setLayout(new GridLayout(0, 2));
    }

    public void init(AppView app) {
        for (ReportEditorCreator qbff : editors) {
            qbff.init(app);
        }
    }

    public void activate() throws BasicException {
        for (ReportEditorCreator qbff : editors) {
            qbff.activate();
        }
    }

    public SerializerWrite getSerializerWrite() {

        SerializerWriteComposed sw = new SerializerWriteComposed();

        for (ReportEditorCreator qbff : editors) {
            sw.add(qbff.getSerializerWrite());
        }

        return sw;
    }

    public Component getComponent() {
        return this;
    }

    public Object createValue() throws BasicException {

        Object[] value = new Object[editors.size()];

        for (int i = 0; i < editors.size(); i++) {
            value[i] = editors.get(i).createValue();
        }

        return value;
    }

    public void addEditor(ReportEditorCreator c) {
        editors.add(c);
        add(c.getComponent());
    }

    static void printTypeInfo(Class<? extends ReportEditorCreator> whichClass) {
        System.out.println("Class name - " + whichClass.getName());
        System.out.println("Simple name - " + whichClass.getSimpleName());
        System.out.println("isInterface - " + whichClass.isInterface());
        System.out.println("Package - " + whichClass.getPackage());
        System.out.println("SuperClass " + whichClass.getSuperclass());
    }

    public List<EntityCondition> getEntityConditions() {
        List<EntityCondition> conditionList = new ArrayList<EntityCondition>();

        for (ReportEditorCreator qbff : editors) {
            try {
            //Class anotherClass = com.openbravo.pos.reports.JParamsStartAndEndDatesInterval.class;
                //if (!(qbff instanceof com.openbravo.pos.reports.JParamsStartAndEndDatesInterval)) {
                printTypeInfo(qbff.getClass());
            //}
                //else{
                //    System.out.println("Class name - " + qbff.getClass().getName());
                //}
                EntityCondition cond = qbff.getEntityCondition();
                if (cond != null) {
                    Debug.logInfo("cond : " + cond.toString(), module);
                    conditionList.add(cond);
                }
            } catch (Exception e) {
                Debug.logError(e, module);
            }
        }
        return conditionList;
    }

    public boolean isEmpty() {

        return editors.isEmpty();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public EntityCondition getEntityCondition() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Map<String, Object> getValues() throws BasicException {
        Map<String, Object> values = new HashMap<String, Object>();
        Debug.logInfo("getValues editors:  " + editors.size(), module);
        for (ReportEditorCreator qbff : editors) {
            try {
                Debug.logInfo("qbff.getClass().getSimpleName():  " + qbff.getEditorClassName(), module);
                values.put(qbff.getEditorClassName(), qbff.getValues());
            } catch (Exception e) {
                Debug.logError(e, module);
            }
        }

        return values;

    }
    
    public String getEditorClassName(){
        return "JParamsComposed";
    }
}
